@using PMS.Web.UI.Code
@using PMS.Shared.Models
@{

    string tblId = "tblRkhDetail";
    string tblMaterialId = "tblRkhMaterial";
    string tblActualId = "tblRkhActual";
    string tblTaksasilId = "tblRkhTaksasi";
    string isReadOnlyString = GeneralHelpers.BooleanStringHtml(ViewBag.ReadOnly);

}

@if (!(ViewBag.ReadOnly))
{
    <x-form-row>
        <x-form-col xs-size="12">
            <button id="btnPilihActivityTop" class="btn btn-primary pull-left" onclick="@(tblId)_Handlers.showForm()">
                Tambah
            </button>
            &nbsp;&nbsp;
            <button id="btnHapusActivityTop" class="btn" onclick="@(tblId)_Handlers.deleteRows()">
                Hapus
            </button>
        </x-form-col>
    </x-form-row>
    <x-form-row>&nbsp;</x-form-row>
}
    <x-form-row>
        <x-form-col xs-size="12">
            <table id="@(tblId)" class="table table-bordered table-hover" data-paging="true" data-sorting="true"></table>
        </x-form-col>
    </x-form-row>

@if (!(ViewBag.ReadOnly))
{
    <x-form-row>
        <x-form-col xs-size="12">
            <button id="btnPilihActivity" class="btn btn-primary pull-left" onclick="@(tblId)_Handlers.showForm()">
                Tambah
            </button>
            &nbsp;&nbsp;
            <button id="btnHapusActivity" class="btn" onclick="@(tblId)_Handlers.deleteRows()">
                Hapus
            </button>
        </x-form-col>
    </x-form-row>

    <x-modal id="mdlActivity" caption="Pilih Kegiatan, Mandor, dan Blok">
        <x-modal-body>
            <x-form-row>
                <x-field-data-list-activity id="ACTID" binding-field="ACTID" caption="Activity" multiple="true" xs-size="12" value-field="*" visible-fields="[ACTIVITYID,ACTIVITYNAME]">
                </x-field-data-list-activity>
            </x-form-row>
            <x-form-row>
                <x-field-number id="DEFEMPCOUNT" binding-field="EMPCOUNT" caption="Jumlah TK (Orang)" xs-size="12" md-size="4"></x-field-number>
            </x-form-row>

            <x-form-row>
                <x-field-data-list-employee id="SPVID" binding-field="SPVID" caption="Mandor" multiple="true" xs-size="12" value-field="*" api-url-param="STATUS=A&Mandor1=true&MandorTanam=true&MandorNonTanam=true">
                </x-field-data-list-employee>
            </x-form-row>
            <x-form-row>
                <x-field-data-list-block id="BLOCKID" binding-field="BLOCKID" caption="Blok" multiple="true" xs-size="12"
                                            ascendants="@(new List<FilterAscendant>
                        {   new FilterAscendant { ElementID = "DIVID", FieldID = "DivisionID" }

                        })" chain-to-relatives="true" value-field="*">
                </x-field-data-list-block>
            </x-form-row>
            <x-form-row>
                <x-field-number id="DEFVOL" binding-field="VOL" caption="Default Volume (%)" xs-size="12" md-size="4"></x-field-number>
            </x-form-row>
            <x-form-row>
                <x-field-data-list-material id="MATERIALID" binding-field="MATERIALID" caption="Material" multiple="true" xs-size="12" value-field="*">
                </x-field-data-list-material>
            </x-form-row>

        </x-modal-body>
        <x-modal-footer>
            <x-form-row>
                <x-form-col xs-size="12">
                    <button id="btnResetActivity" class="btn" onclick="resetElements('mdlActivity')">
                        Reset
                    </button>
                    &nbsp;&nbsp;
                    <button id="btnAddActivity" class="btn btn-primary" onclick="@(tblId)_Handlers.addRows()">
                        Tambah
                    </button>
                    &nbsp;&nbsp;
                    <button id="btnAddCloseActivity" class="btn btn-primary" onclick="@(tblId)_Handlers.addRows(true)">
                        Tambah dan Tutup
                    </button>
                    &nbsp;&nbsp;
                    <button id="btnCloseActivity" class="btn" onclick="$('#mdlActivity').modal('hide')">
                        Tutup
                    </button>
                </x-form-col>
            </x-form-row>
        </x-modal-footer>
    </x-modal>
}


<script>

    var @(tblId)_Handlers = {
        columns: [
            {
                "type": "html",
                "name": "CHKSELECT",
                "title": "<input type='checkbox' id='chkAllActivity' name='chkDeleteActivity' onclick='checkAllCheckBox(this)'>",
                "visible": !@(isReadOnlyString),
                "formatter": function (value,option,rowdata) {
                    return "<input type='checkbox' name='chkDeleteActivity'>";
                },
            },
            {
                "type": "text",
                "name": "key",
                "visible": false
            },
            {
                "type": "text",
                "name": "ACTID",
                "title": "Kode Kegiatan",
                "visible": false
            },
            {
                "type": "text",
                "title": "Kegiatan",
                "name": "ACTNAME",
                "visible": true
            },
            {
                "type": "number",
                "title": "TK (Orang)",
                "name": "EMPCOUNT",
                "visible": @(isReadOnlyString),
            },
             {
                "type": "html",
                 "name": "EMPCOUNT_INPUT",
                 "title": "TK (Orang)",
                "visible": !@(isReadOnlyString),
                "formatter": function (value,option,rowdata) {
                    return "<input type='number' name='EMPCOUNT' value='" + rowdata["EMPCOUNT"] + "'  data-bf='EMPCOUNT'  onfocusout='@(tblId)_Handlers.updateEmployeeCountOnRow(this)'>";
                },

            },
            {
                "type": "text",
                "name": "SPVID",
                "title": "NIK Mandor",
                "visible": false
            },
            {
                "type": "text",
                "name": "SPVNAME",
                "title": "Mandor",
                "visible": true
            },

            {
                "type": "text",
                "name": "BLOCKID",
                "title": "Blok",
                "visible": false
            },
            {
                "type": "text",
                "name": "BLOCKCODE",
                "title": "Blok",
                "visible": true
            },
            {
                "type": "number",
                "name": "LUASBLOCK",
                "title": "Luas (Ha)",
                "visible": true
            },
            {
                "type": "number",
                "name": "VOL",
                "title": "Volume",
                "visible": @(isReadOnlyString)
            },
            {
                "type": "html",
                "name": "VOL_INPUT",
                "title": "Volume",
                "visible": !@(isReadOnlyString),
                "formatter": function (value,option,rowdata) {
                    return "<input type='number' name='VOL' value='" + rowdata["VOL"] + "'  data-bf='VOL'  onfocusout='updateInputToRow(this)'>";
                },

            },
            {
                "type": "text",
                "name": "UOM",
                "title": "UOM",
                "visible": true
            },
        ],
        showForm: function () {
            if (!$('#DIVID').flexdatalist('value')) {
                alert("Divisi belum dipilih");
                return false;
            }

            $('#mdlActivity').modal('show');
            return true;
        },
        initTable: function (rows) {
            if (isAny(rows)) {
                rows.forEach(function (row) {
                    row.ACTNAME = dictActivities[row.ACTID].ACTNAME;
                    row.SPVNAME = dictMandors[row.SPVID].SPVNAME;
                    row.LUASBLOCK = dictBlocks[row.BLOCKID].LUASBLOCK;
                    row.BLOCKCODE = dictBlocks[row.BLOCKID].BLOCKCODE;
                    row.UOM = dictActivities[row.ACTID].UOM;
                    dictActivities[row.ACTID].EMPCOUNT = row.EMPCOUNT;
                });
            }

            $("#@(tblId)").footable({
                "columns": @(tblId)_Handlers.columns,
                "rows": rows
            });
            return;
        },
        rowKeys: ["ACTID", "SPVID", "BLOCKID"],
        getRowKey: function (values) {
            if (values)
                return helper.footableRowKey(values, @(tblId)_Handlers.rowKeys);
            return null;
        },

        isRowExist: function (values, allrows) {
            return helper.footableRowExist(values, allrows,@(tblId)_Handlers.rowKeys);
        }, 

        selectedActivities: [],
        selectedMandors: [],
        selectedBlocks: [],


        addRows: function (closeForm) {

            @(tblId)_Handlers.selectedActivities = $('#ACTID').flexdatalist('value');
            if (!@(tblId)_Handlers.selectedActivities || !@(tblId)_Handlers.selectedActivities.length) {
                alert("Kegiatan belum dipilih");
                return false;
            }


            if (!$('#DEFEMPCOUNT').val()) {
                alert("Jumlah orang belum diisi");
                return false;
            }

            @(tblId)_Handlers.selectedMandors = $('#SPVID').flexdatalist('value');
            if (!@(tblId)_Handlers.selectedMandors || !@(tblId)_Handlers.selectedMandors.length) {
                alert("Mandor belum dipilih");
                return false;
            }

            @(tblId)_Handlers.selectedBlocks = $('#BLOCKID').flexdatalist('value');
            if (!@(tblId)_Handlers.selectedBlocks || !(@(tblId)_Handlers.selectedBlocks.length)) {
                alert("Blok belum dipilih");
                return false;
            }

            @(tblActualId)_Handlers.selectedMandors = $('#SPVID').flexdatalist('value');
            @(tblActualId)_Handlers.selectedActivities = $('#ACTID').flexdatalist('value');

            var jumlahOrang = $('#DEFEMPCOUNT').val();
            if (!jumlahOrang || jumlahOrang < 0) {
                alert("Jumlah orang harus diisi");
                return false;
            }

            var defaultVolume = $('#DEFVOL').val();
            if (!defaultVolume)
                defaultVolume = 0;
            else
                defaultVolume = defaultVolume * 0.01;

            var ft = FooTable.get('#@(tblId)');
            if (!ft) {
                alert("invalid table");
                return;
            }
            var added = 0, harvestingBlocks = {};
                
            @(tblTaksasilId)_Handlers.selectedBlocks = [];
            @(tblId)_Handlers.selectedActivities.forEach(function (activity) {
                var act = {
                    ACTID: activity.ACTIVITYID,
                    ACTNAME: activity.ACTIVITYID + ' - ' + activity.ACTIVITYNAME,
                    EMPCOUNT: jumlahOrang
                };

                dictActivities[activity.ACTIVITYID] = act;
                @(tblId)_Handlers.updateEmployeeCount(activity.ACTIVITYID, jumlahOrang, ft);
                @(tblId)_Handlers.selectedMandors.forEach(function (mandor) {
                    @(tblId)_Handlers.selectedBlocks.forEach(function (block) {
                        var detail =
                        {
                            ACTID: activity.ACTIVITYID,
                            ACTNAME: activity.ACTIVITYID + ' - ' + activity.ACTIVITYNAME,
                            EMPCOUNT: jumlahOrang,
                            SPVID: mandor.EMPID,
                            SPVNAME: mandor.EMPID + ' - ' + mandor.EMPNAME,
                            BLOCKID: block.BLOCKID,
                            BLOCKCODE: block.CODE,
                            LUASBLOCK: block.LUASBLOCK,
                            VOL: block.LUASBLOCK * defaultVolume,
                            UOM: activity.UOM1
                        };
                        detail.key = @(tblId)_Handlers.getRowKey(detail);
                        if (!@(tblId)_Handlers.isRowExist(detail, ft.rows.all)) {
                            ft.rows.add(detail, false);
                            added++;

                            if (activity.HV)
                                @(tblTaksasilId)_Handlers.selectedBlocks.push(block);
                        }
                    });
                });
            });


            if (added) {
                ft.draw();
                @(tblMaterialId)_Handlers.addRows();
                @(tblActualId)_Handlers.addRows();
                @(tblTaksasilId)_Handlers.addRows();
            }
            if (closeForm)
                $('#mdlActivity').modal('hide');
            return;
        },

        deleteRows: function () {
            if (!confirm('Yakin akan menghapus detail kegiatan?'))
                return;

            var ft = FooTable.get('#@(tblId)');
            var deletedCount = 0,
                deletedActivities = {},
                deletedActuals = {},
                deletedBlocks = {};
            if (ft) {
                $('[name = "chkDeleteActivity"]').each(function () {
                    if (this.id !== 'chkAllActivity') {
                        if (this.checked) {
                            var $row = FooTable.getRow($(this).closest('tr'));
                            $row.delete(false);
                            deletedCount++;
                            //deletedRows.push($row);
                            deletedActivities[$row.val()["ACTID"]] = $row.val()["ACTID"];
                            deletedBlocks[$row.val()["BLOCKID"]] = $row.val()["BLOCKID"];
                            deletedActuals[$row.val()["ACTID"] + "***" + $row.val()["SPVID"]] = {
                                ACTID: $row.val()["ACTID"],
                                SPVID: $row.val()["SPVID"]
                            }
                        }

                    }
                });
                if (deletedCount) {
                    ft.draw();

                    var newDeletedActivities = [];
                    Object.keys(deletedActivities).forEach(function (key) {                
                        var activityId = deletedActivities[key];
                        var deleteActivity = true;
                        $.each(ft.rows.all, function (i, row) {
                            if (row.val()["ACTID"] === activityId) {
                                deleteActivity = false;
                                return;
                            }
                        });
                        if (deleteActivity)
                            newDeletedActivities.push(activityId);
                    });
                    @(tblMaterialId)_Handlers.deleteRows(newDeletedActivities);

                    var newDeletedBlocks = [];
                    Object.keys(deletedBlocks).forEach(function (key) {
                        var blockId = deletedBlocks[key];
                        var deleteBlock = true;
                        $.each(ft.rows.all, function (i, row) {
                            if (row.val()["BLOCKID"] === blockId) {
                                deleteBlock = false;
                                return;
                            }   
                        });
                        if (deleteBlock)
                            newDeletedBlocks.push(blockId);
                    });
                    
                    @(tblTaksasilId)_Handlers.deleteRows(newDeletedBlocks);


                    var newDeletedActuals = [];
                    Object.keys(deletedActuals).forEach(function (key) {
                        var actual = deletedActuals[key];
                        var deleteActual = true;
                        $.each(ft.rows.all, function (i, row) {
                            if (row.val()["ACTID"] === actual.ACTID && row.val()["SPVID"] === actual.SPVID ) {
                                deleteActual = false;
                                return;
                            }
                        });
                        if (deleteActual)
                            newDeletedActuals.push(actual);
                    });
                    
                    @(tblActualId)_Handlers.deleteRows(newDeletedActuals);
                }
                
            }
        },
        saveRows : function () {
            var ft = FooTable.get('#@(tblId)');
            if (!ft) {
                alert("invalid table");
                return null;
            }

            var rows = [];
            $.each(ft.rows.all, function (i, row) {                
                if (row.val()["VOL"] > 0 && row.val()["EMPCOUNT"]>0)
                    rows.push(row.val());
            });
            return rows;
        },
        updateEmployeeCount: function (activityId, employeeCount, ft) {
            if (!ft)
                ft = FooTable.get('#@(tblId)');
            if (ft) {
                $.each(ft.rows.all, function (i, row) {
                    var v = row.val();
                    if (v["ACTID"] === activityId) {
                        v["EMPCOUNT"] = employeeCount;
                        row.val(v, false, true)
                    }
                });
            }
        },

        updateEmployeeCountOnRow: function (element) {
            var employeeCount = $(element).val();
            var $tr = $(element).closest('tr');
            var $row = FooTable.getRow($tr);
            var $rowVal = $row.val();
            var activityId = $rowVal["ACTID"];
            var oldEmployeeCount = $rowVal["EMPCOUNT"];

            if (employeeCount != oldEmployeeCount) {
                if (employeeCount <= 0) {
                    $(element).val(oldEmployeeCount);
                    return false;
                }
                @(tblId)_Handlers.updateEmployeeCount(activityId, employeeCount);
            }

        }


    };
</script>
