// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace FileStorage.EFCore
{
    public partial class FilestorageContext : DbContext
    {
        public string ConnectionString { get; }

        public FilestorageContext()
        {
            throw new Exception("Invalid connection string");
        }

        public FilestorageContext(DbContextOptions<FilestorageContext> options): base(options)
        {
            foreach (var extension in options.Extensions)
            {
                if (extension.GetType() == typeof(Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension))
                {
                    ConnectionString = ((Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension)extension).ConnectionString;
                    break;
                }
            }
        }

        public virtual DbSet<File> File { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<File>(entity =>
            {
                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FileContent).IsRequired();

                entity.Property(e => e.FileType)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UsedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}