// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace PMS.EFCore.Model
{
    public partial class PMSContextBase : DbContext
    {
        public virtual DbSet<MEMPLOYEEPINRANGE> MEMPLOYEEPINRANGE { get; set; }
        public virtual DbSet<ARCCHECKSUM> ARCCHECKSUM { get; set; }
        public virtual DbSet<BLOCK> BLOCK { get; set; }
        public virtual DbSet<BLOCKTEMP> BLOCKTEMP { get; set; }
        public virtual DbSet<DHS_DOKET> DHS_DOKET { get; set; }
        public virtual DbSet<DHS_RKHHEADER> DHS_RKHHEADER { get; set; }
        public virtual DbSet<DHS_SPB> DHS_SPB { get; set; }
        public virtual DbSet<DOKETKG> DOKETKG { get; set; }
        public virtual DbSet<DimUnit> DimUnit { get; set; }
        public virtual DbSet<JOBSCHECKSUM> JOBSCHECKSUM { get; set; }
        public virtual DbSet<JOBSCHECKSUMARC> JOBSCHECKSUMARC { get; set; }
        public virtual DbSet<JOBSSTATUS> JOBSSTATUS { get; set; }
        public virtual DbSet<JOBSUNIT> JOBSUNIT { get; set; }
        public virtual DbSet<JOBSWBSTATUS> JOBSWBSTATUS { get; set; }
        public virtual DbSet<MABSENTTYPE> MABSENTTYPE { get; set; }
        public virtual DbSet<MACCOUNT> MACCOUNT { get; set; }
        public virtual DbSet<MACCOUNTTYPE> MACCOUNTTYPE { get; set; }
        public virtual DbSet<MACTIVITY> MACTIVITY { get; set; }
        public virtual DbSet<MACTIVITYACCOUNT> MACTIVITYACCOUNT { get; set; }
        public virtual DbSet<MACTIVITYDETAIL> MACTIVITYDETAIL { get; set; }
        public virtual DbSet<MACTIVITYMAP> MACTIVITYMAP { get; set; }
        public virtual DbSet<MACTIVITYRATE> MACTIVITYRATE { get; set; }
        public virtual DbSet<MATTENDANCEGROUP> MATTENDANCEGROUP { get; set; }
        public virtual DbSet<MATTENDANCEGROUPITEM> MATTENDANCEGROUPITEM { get; set; }
        public virtual DbSet<MATTMACHINE> MATTMACHINE { get; set; }
        public virtual DbSet<MBLOCK> MBLOCK { get; set; }
        public virtual DbSet<MBLOCKHIST> MBLOCKHIST { get; set; }
        public virtual DbSet<MCARD> MCARD { get; set; }
        public virtual DbSet<MCOMPANY> MCOMPANY { get; set; }
        public virtual DbSet<MCONFIG> MCONFIG { get; set; }
        public virtual DbSet<MCURRENCY> MCURRENCY { get; set; }
        public virtual DbSet<MDATE> MDATE { get; set; }
        public virtual DbSet<MDIVISI> MDIVISI { get; set; }
        public virtual DbSet<MDOCSTATUS> MDOCSTATUS { get; set; }
        public virtual DbSet<MDOWNLOADTYPE> MDOWNLOADTYPE { get; set; }
        public virtual DbSet<MEMPLOYEE> MEMPLOYEE { get; set; }
        public virtual DbSet<MEMPLOYEEBANK> MEMPLOYEEBANK { get; set; }
        public virtual DbSet<MEMPLOYEEFAMILY> MEMPLOYEEFAMILY { get; set; }
        public virtual DbSet<MEMPLOYEEFILE> MEMPLOYEEFILE { get; set; }
        public virtual DbSet<MEMPLOYEEHISTORY> MEMPLOYEEHISTORY { get; set; }
        public virtual DbSet<MEMPLOYEETYPE> MEMPLOYEETYPE { get; set; }
        public virtual DbSet<MHARVESTTYPE> MHARVESTTYPE { get; set; }
        public virtual DbSet<MJAMSOSTEK> MJAMSOSTEK { get; set; }
        public virtual DbSet<MJOURNALTYPE> MJOURNALTYPE { get; set; }
        public virtual DbSet<MMATERIAL> MMATERIAL { get; set; }
        public virtual DbSet<MMENU> MMENU { get; set; }
        public virtual DbSet<MMENUACCESS> MMENUACCESS { get; set; }
        public virtual DbSet<MMILL> MMILL { get; set; }
        public virtual DbSet<MMONTH> MMONTH { get; set; }
        public virtual DbSet<MORGANIZATION> MORGANIZATION { get; set; }
        public virtual DbSet<MPAYMENTSCHEME> MPAYMENTSCHEME { get; set; }
        public virtual DbSet<MPAYROLLACCOUNT> MPAYROLLACCOUNT { get; set; }
        public virtual DbSet<MPENALTY> MPENALTY { get; set; }
        public virtual DbSet<MPENALTYTYPE> MPENALTYTYPE { get; set; }
        public virtual DbSet<MPERIOD> MPERIOD { get; set; }
        public virtual DbSet<MPOSITION> MPOSITION { get; set; }
        public virtual DbSet<MPOSITIONDETAIL> MPOSITIONDETAIL { get; set; }
        public virtual DbSet<MPOSITIONGROUP> MPOSITIONGROUP { get; set; }
        public virtual DbSet<MPREMIMUAT> MPREMIMUAT { get; set; }
        public virtual DbSet<MPREMIMUATBLOCK> MPREMIMUATBLOCK { get; set; }
        public virtual DbSet<MPREMIOPERATOR> MPREMIOPERATOR { get; set; }
        public virtual DbSet<MPREMIPANEN> MPREMIPANEN { get; set; }
        public virtual DbSet<MPREMIPANENBLOCK> MPREMIPANENBLOCK { get; set; }
        public virtual DbSet<MPREMIRUNNINGACCOUNT> MPREMIRUNNINGACCOUNT { get; set; }
        public virtual DbSet<MPREMIRUNNINGACCOUNTID> MPREMIRUNNINGACCOUNTID { get; set; }
        public virtual DbSet<MPREMISYSTEM> MPREMISYSTEM { get; set; }
        public virtual DbSet<MPRODUCT> MPRODUCT { get; set; }
        public virtual DbSet<MQLYCAT> MQLYCAT { get; set; }
        public virtual DbSet<MRANGE> MRANGE { get; set; }
        public virtual DbSet<MROLEFORM> MROLEFORM { get; set; }
        public virtual DbSet<MROLEUSER> MROLEUSER { get; set; }
        public virtual DbSet<MRUNNINGACCOUNT> MRUNNINGACCOUNT { get; set; }
        public virtual DbSet<MRUNNINGACCOUNTTYPE> MRUNNINGACCOUNTTYPE { get; set; }
        public virtual DbSet<MRUNNUMBER> MRUNNUMBER { get; set; }
        public virtual DbSet<MSALARYTYPE> MSALARYTYPE { get; set; }
        public virtual DbSet<MSCHEDULEEMPLOYEE> MSCHEDULEEMPLOYEE { get; set; }
        public virtual DbSet<MSTATUS> MSTATUS { get; set; }
        public virtual DbSet<MSTORELOCATION> MSTORELOCATION { get; set; }
        public virtual DbSet<MTPH> MTPH { get; set; }
        public virtual DbSet<MUNIT> MUNIT { get; set; }
        public virtual DbSet<MUNITDBSERVER> MUNITDBSERVER { get; set; }
        public virtual DbSet<MUNITPLASMA> MUNITPLASMA { get; set; }
        public virtual DbSet<MUPKEEPTYPE> MUPKEEPTYPE { get; set; }
        public virtual DbSet<MUSERMASTER> MUSERMASTER { get; set; }
        public virtual DbSet<MVEHICLE> MVEHICLE { get; set; }
        public virtual DbSet<MVEHICLETYPE> MVEHICLETYPE { get; set; }
        public virtual DbSet<TLOANEMP> TLOANEMP { get; set; }
        public virtual DbSet<TLOANEMPITEM> TLOANEMPITEM { get; set; }
        public virtual DbSet<TLOANEMPTENOR> TLOANEMPTENOR { get; set; }

        public virtual DbSet<REMPATT> REMPATT { get; set; }
        public virtual DbSet<RLABOUR> RLABOUR { get; set; }
        public virtual DbSet<RLABOURITM> RLABOURITM { get; set; }
        public virtual DbSet<RPOS> RPOS { get; set; }
        public virtual DbSet<RPOSGROUP> RPOSGROUP { get; set; }
        public virtual DbSet<SAPPARAM> SAPPARAM { get; set; }
        public virtual DbSet<SAPPAYROLLACCOUNT> SAPPAYROLLACCOUNT { get; set; }
        public virtual DbSet<SAPPAYROLLCOSTCTR> SAPPAYROLLCOSTCTR { get; set; }
        public virtual DbSet<SAPUNIT> SAPUNIT { get; set; }
        public virtual DbSet<SAPUPKEEPRESULT> SAPUPKEEPRESULT { get; set; }
        public virtual DbSet<SPBKG> SPBKG { get; set; }
        public virtual DbSet<SYNCDOWNLOAD> SYNCDOWNLOAD { get; set; }
        public virtual DbSet<SYNCTABLELIST> SYNCTABLELIST { get; set; }
        public virtual DbSet<TACCOUNTHISTORY> TACCOUNTHISTORY { get; set; }
        public virtual DbSet<TACTIVITYMATERIALMAP> TACTIVITYMATERIALMAP { get; set; }
        public virtual DbSet<TAPPROVAL> TAPPROVAL { get; set; }
        public virtual DbSet<TATTENDANCE> TATTENDANCE { get; set; }
        public virtual DbSet<TATTENDANCELOG> TATTENDANCELOG { get; set; }
        public virtual DbSet<TATTENDANCESPL> TATTENDANCESPL { get; set; }
        public virtual DbSet<TATTENDANCETRX> TATTENDANCETRX { get; set; }
        public virtual DbSet<TBUDGETPROD> TBUDGETPROD { get; set; }
        public virtual DbSet<TCALENDAR> TCALENDAR { get; set; }
        public virtual DbSet<TCLOSEYEAR> TCLOSEYEAR { get; set; }
        public virtual DbSet<TCOGS> TCOGS { get; set; }
        public virtual DbSet<TCONTRACT> TCONTRACT { get; set; }
        public virtual DbSet<TCONTRACTITEM> TCONTRACTITEM { get; set; }
        public virtual DbSet<TEMPLOYEECHANGE> TEMPLOYEECHANGE { get; set; }
        public virtual DbSet<TEMPLOYEEREGISTRATION> TEMPLOYEEREGISTRATION { get; set; }
        public virtual DbSet<TEMPLOYEEREGISTRATIONFAMILY> TEMPLOYEEREGISTRATIONFAMILY { get; set; }
        public virtual DbSet<TEMPLOYEEREGISTRATIONFILE> TEMPLOYEEREGISTRATIONFILE { get; set; }
        public virtual DbSet<TEQUIPTIMESHEET> TEQUIPTIMESHEET { get; set; }
        public virtual DbSet<TEQUIPTIMESHEETACTIVITY> TEQUIPTIMESHEETACTIVITY { get; set; }
        public virtual DbSet<TEQUIPTIMESHEETEMPLOYEE> TEQUIPTIMESHEETEMPLOYEE { get; set; }
        public virtual DbSet<TEQUIPTIMESHEETMATERIAL> TEQUIPTIMESHEETMATERIAL { get; set; }
        public virtual DbSet<TGERDANRESULT> TGERDANRESULT { get; set; }
        public virtual DbSet<TGI> TGI { get; set; }
        public virtual DbSet<TGIITEM> TGIITEM { get; set; }
        public virtual DbSet<TGM> TGM { get; set; }
        public virtual DbSet<TGMITEM> TGMITEM { get; set; }
        public virtual DbSet<TGR> TGR { get; set; }
        public virtual DbSet<TGRITEM> TGRITEM { get; set; }
        public virtual DbSet<THARVEST> THARVEST { get; set; }
        public virtual DbSet<THARVESTASIS> THARVESTASIS { get; set; }
        public virtual DbSet<THARVESTBASE> THARVESTBASE { get; set; }
        public virtual DbSet<THARVESTBLOCK> THARVESTBLOCK { get; set; }
        public virtual DbSet<THARVESTBLOCKQLY> THARVESTBLOCKQLY { get; set; }
        public virtual DbSet<THARVESTBLOCKRESULT> THARVESTBLOCKRESULT { get; set; }
        public virtual DbSet<THARVESTCOLLECT> THARVESTCOLLECT { get; set; }
        public virtual DbSet<THARVESTEMPLOYEE> THARVESTEMPLOYEE { get; set; }
        public virtual DbSet<THARVESTFINE> THARVESTFINE { get; set; }
        public virtual DbSet<THARVESTPLAN> THARVESTPLAN { get; set; }
        public virtual DbSet<THARVESTPLANBLOCK> THARVESTPLANBLOCK { get; set; }
        public virtual DbSet<THARVESTPLANEMPLOYEE> THARVESTPLANEMPLOYEE { get; set; }
        public virtual DbSet<THARVESTPLANEMPLOYEECALC> THARVESTPLANEMPLOYEECALC { get; set; }
        public virtual DbSet<THARVESTRESULT> THARVESTRESULT { get; set; }
        public virtual DbSet<THARVESTRESULT1> THARVESTRESULT1 { get; set; }
        public virtual DbSet<THARVESTROT> THARVESTROT { get; set; }
        public virtual DbSet<TINCMANDORPERIOD> TINCMANDORPERIOD { get; set; }
        public virtual DbSet<TINCMANDORPERIODPOS> TINCMANDORPERIODPOS { get; set; }
        public virtual DbSet<TJOURNAL> TJOURNAL { get; set; }
        public virtual DbSet<TJOURNALITEM> TJOURNALITEM { get; set; }
        public virtual DbSet<TKARTUTIMBANG> TKARTUTIMBANG { get; set; }
        public virtual DbSet<TLOADING> TLOADING { get; set; }
        public virtual DbSet<TLOADINGASIS> TLOADINGASIS { get; set; }
        public virtual DbSet<TLOADINGBASE> TLOADINGBASE { get; set; }
        public virtual DbSet<TLOADINGBLOCK> TLOADINGBLOCK { get; set; }
        public virtual DbSet<TLOADINGBLOCKRESULT> TLOADINGBLOCKRESULT { get; set; }
        public virtual DbSet<TLOADINGCOLLECT> TLOADINGCOLLECT { get; set; }
        public virtual DbSet<TLOADINGDRIVER> TLOADINGDRIVER { get; set; }
        public virtual DbSet<TLOADINGEMPLOYEE> TLOADINGEMPLOYEE { get; set; }
        public virtual DbSet<TLOADINGRESULT> TLOADINGRESULT { get; set; }
        public virtual DbSet<TLOADINGROT> TLOADINGROT { get; set; }
        public virtual DbSet<TMANDORFINE> TMANDORFINE { get; set; }
        public virtual DbSet<TMILLGRADING> TMILLGRADING { get; set; }
        public virtual DbSet<TOPERATINGRESULT> TOPERATINGRESULT { get; set; }
        public virtual DbSet<TOVERTIME> TOVERTIME { get; set; }
        public virtual DbSet<TPAYMENT> TPAYMENT { get; set; }
        public virtual DbSet<TPAYMENTATTR> TPAYMENTATTR { get; set; }
        public virtual DbSet<TPAYMENTATTREMP> TPAYMENTATTREMP { get; set; }
        public virtual DbSet<TPAYMENTDETAIL> TPAYMENTDETAIL { get; set; }
        public virtual DbSet<TPAYMENTDETAILTRX> TPAYMENTDETAILTRX { get; set; }
        public virtual DbSet<TPAYMENTITEM> TPAYMENTITEM { get; set; }
        public virtual DbSet<TPAYMENTSCHEME> TPAYMENTSCHEME { get; set; }
        public virtual DbSet<TPAYMENTTAX> TPAYMENTTAX { get; set; }
        public virtual DbSet<TPREMICHECKER> TPREMICHECKER { get; set; }
        public virtual DbSet<TPREMIMANDOR> TPREMIMANDOR { get; set; }
        public virtual DbSet<TPREMIMANDOR1> TPREMIMANDOR1 { get; set; }
        public virtual DbSet<TPREMINONPANEN> TPREMINONPANEN { get; set; }
        public virtual DbSet<TRKH> TRKH { get; set; }
        public virtual DbSet<TRKHACTUAL> TRKHACTUAL { get; set; }
        public virtual DbSet<TRKHDETAIL> TRKHDETAIL { get; set; }
        public virtual DbSet<TRKHESTPANEN> TRKHESTPANEN { get; set; }
        public virtual DbSet<TRKHHASILKERJA> TRKHHASILKERJA { get; set; }
        public virtual DbSet<TRKHHERBISIDA> TRKHHERBISIDA { get; set; }
        public virtual DbSet<TRKHMATERIAL> TRKHMATERIAL { get; set; }
        public virtual DbSet<TRKHTAKSASI> TRKHTAKSASI { get; set; }
        public virtual DbSet<TRUNNINGACCOUNT> TRUNNINGACCOUNT { get; set; }
        public virtual DbSet<TRUNNINGACCOUNTBLOCK> TRUNNINGACCOUNTBLOCK { get; set; }
        public virtual DbSet<TSALARYITEM> TSALARYITEM { get; set; }
        public virtual DbSet<TSALARYTYPEMAP> TSALARYTYPEMAP { get; set; }
        public virtual DbSet<TSPB> TSPB { get; set; }
        public virtual DbSet<TSPBDETAIL> TSPBDETAIL { get; set; }
        public virtual DbSet<TSTOCK> TSTOCK { get; set; }
        public virtual DbSet<TSTOCKADJUST> TSTOCKADJUST { get; set; }
        public virtual DbSet<TSTOCKMOVEMENT> TSTOCKMOVEMENT { get; set; }
        public virtual DbSet<TSURATPERINGATAN> TSURATPERINGATAN { get; set; }
        public virtual DbSet<TTRANMILL> TTRANMILL { get; set; }
        public virtual DbSet<TTRANMILLITM> TTRANMILLITM { get; set; }
        public virtual DbSet<TUPKEEP> TUPKEEP { get; set; }
        public virtual DbSet<TUPKEEPBLOCK> TUPKEEPBLOCK { get; set; }
        public virtual DbSet<TUPKEEPEMPLOYEE> TUPKEEPEMPLOYEE { get; set; }
        public virtual DbSet<TUPKEEPMATERIAL> TUPKEEPMATERIAL { get; set; }
        public virtual DbSet<TUPKEEPCALC> TUPKEEPCALC { get; set; }
        public virtual DbSet<TUPKEEPVENDOR> TUPKEEPVENDOR { get; set; }
        public virtual DbSet<WFDOCUMENT> WFDOCUMENT { get; set; }
        public virtual DbSet<WFDOCUMENTBAFDETAIL> WFDOCUMENTBAFDETAIL { get; set; }
        public virtual DbSet<WFDOCUMENTPREMINONPANEN> WFDOCUMENTPREMINONPANEN { get; set; }
        public virtual DbSet<WFDOCUMENTVIEW> WFDOCUMENTVIEW { get; set; }
        
        public virtual DbSet<MICRAPP> MICRAPP { get; set; }
        public virtual DbSet<TICR> TICR { get; set; }
        public virtual DbSet<TICRAPP> TICRAPP { get; set; }
        public virtual DbSet<SAPPOSTING> SAPPOSTING { get; set; }
        public virtual DbSet<SAPPOSTINGHEADER> SAPPOSTINGHEADER { get; set; }
        
        public virtual DbSet<TSPEKSI> TSPEKSI { get; set; }
        public virtual DbSet<TSPEKSITPH> TSPEKSITPH { get; set; }
        public virtual DbSet<MDEPARTMENT> MDEPARTMENT { get; set; }
        public virtual DbSet<TITEMAILREQUEST> TITEMAILREQUEST { get; set; }
        public virtual DbSet<TITINVOICE> TITINVOICE { get; set; }
        public virtual DbSet<TITIOM> TITIOM { get; set; }
        public virtual DbSet<MBANK> MBANK { get; set; }
        public virtual DbSet<TTRAVEL> TTRAVEL { get; set; }
        public virtual DbSet<TCAPPINGEMP> TCAPPINGEMP { get; set; }
        public virtual DbSet<JOBSEMPLASTDATE> JOBSEMPLASTDATE { get; set; }
        public virtual DbSet<MABSENCEREASON> MABSENCEREASON { get; set; }
        public virtual DbSet<TATTENDANCEPROBLEM> TATTENDANCEPROBLEM { get; set; }
        public virtual DbSet<TATTENDANCEPROBLEMEMPLOYEE> TATTENDANCEPROBLEMEMPLOYEE { get; set; }
        public virtual DbSet<MEMPLOYEEDEL> MEMPLOYEEDEL { get; set; }
        public virtual DbSet<THARVESTWFLEBIHBASIS> THARVESTWFLEBIHBASIS { get; set; }
        public virtual DbSet<THARVESTWFLEBIHBASISDETAIL> THARVESTWFLEBIHBASISDETAIL { get; set; }
        public virtual DbSet<THARVESTWFMAXBRONDOL> THARVESTWFMAXBRONDOL { get; set; }
        public virtual DbSet<THARVESTWFMAXBRONDOLDETAIL> THARVESTWFMAXBRONDOLDETAIL { get; set; }

        public virtual DbSet<THARVESTWFDAYVALIDATION> THARVESTWFDAYVALIDATION { get; set; }
        public virtual DbSet<TPAYMENTWFADJUSTHK> TPAYMENTWFADJUSTHK { get; set; }
        public virtual DbSet<TPAYMENTWFADJUSTHKDETAIL> TPAYMENTWFADJUSTHKDETAIL { get; set; }

        public virtual DbSet<TLEAVE> TLEAVE { get; set; }
        public virtual DbSet<MLEAVETYPE> MLEAVETYPE { get; set; }

        public virtual DbSet<EM_TINSPECTION> EM_TINSPECTION { get; set; }
        public virtual DbSet<EM_TTRACKING> EM_TTRACKING { get; set; }


        public virtual DbSet<RKHHEADER1> RKHHEADER1 { get; set; }
        public virtual DbSet<RKHMANDOR1> RKHMANDOR1 { get; set; }
        public virtual DbSet<RKHBLOCK1> RKHBLOCK1 { get; set; }
        public virtual DbSet<RKHEMPLOYEE1> RKHEMPLOYEE1 { get; set; }
        public virtual DbSet<RKHMATERIAL1> RKHMATERIAL1 { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            

            

            


            

            modelBuilder.Entity<ARCCHECKSUM>(entity =>
            {
                entity.HasKey(e => new { e.UNITID, e.NAME, e.NOTE });

                entity.Property(e => e.UNITID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MODUL)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VALUE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE10).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE7).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE8).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE9).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<BLOCK>(entity =>
            {
                entity.HasKey(e => e.BLK_ID);

                entity.Property(e => e.BLK_ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTIVE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BLK_CODE)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BLK_DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLK_ESTID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLK_LUAS).HasColumnType("numeric(7, 2)");
            });

            modelBuilder.Entity<BLOCKTEMP>(entity =>
            {
                entity.HasKey(e => new { e.ESTATE, e.DIVID, e.BLOCKID });

                entity.Property(e => e.ESTATE)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BJR).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.COSTCTR)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.JENISBIBIT)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.KELASTANAH)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PHASE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PLANTINGDT)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TOPOGRAPI)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.TOTAREA).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.WBS)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DHS_DOKET>(entity =>
            {
                entity.HasKey(e => e.DOK_ID)
                    .ForSqlServerIsClustered(false);

                entity.HasIndex(e => new { e.DOK_TGLPANEN, e.DOK_ID, e.DOK_KERANIID })
                    .HasName("IDX_DHS_DOKET")
                    .IsUnique()
                    .ForSqlServerIsClustered();

                entity.Property(e => e.DOK_ID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_BLOCKCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_BLOCKID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_CATATAN)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_CHECKERID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_FOTO)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_FOTO2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_ISRSPO)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DOK_JAMCATAT).HasColumnType("datetime");

                entity.Property(e => e.DOK_KERANIID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_LG)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_LT)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_MANDORID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_PEMANEN)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_PEMBRONDOL)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_STATUS)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_TGLPANEN).HasColumnType("datetime");

                entity.Property(e => e.DOK_TPHCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DOK_XDOKETID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.DOK_BLOCKCODENavigation)
                    .WithMany(p => p.DHS_DOKET)
                    .HasForeignKey(d => d.DOK_BLOCKCODE)
                    .HasConstraintName("FK_DHS_DOKET_MBLOCK");
            });

            modelBuilder.Entity<DHS_RKHHEADER>(entity =>
            {
                entity.HasKey(e => e.RKH_CODE)
                    .ForSqlServerIsClustered(false);

                entity.HasIndex(e => new { e.RKH_MANDORID, e.RKH_DIVID, e.RKH_TGLPANEN, e.RKH_TYPEPANEN, e.RKH_JJGACTID, e.RKH_KERANIID, e.RKH_KERANIPGID, e.RKH_CHECKERID, e.RKH_ACTIVE })
                    .HasName("IDX_DHS_RKHHEADER")
                    .IsUnique()
                    .ForSqlServerIsClustered();

                entity.Property(e => e.RKH_CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_ACTIVE)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_BRDACTID)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RKH_CHECKERID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_DIVCREATE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_DIVID).HasMaxLength(50);

                entity.Property(e => e.RKH_DOWNLOAD)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_ESTID).HasMaxLength(50);

                entity.Property(e => e.RKH_JJGACTID)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RKH_JMLTRUCK)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RKH_KERANIID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_KERANIPGID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RKH_MANDOR1ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_MANDORID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_TGLPANEN).HasColumnType("datetime");

                entity.Property(e => e.RKH_TYPEPANEN)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.RKH_USERCREATE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DHS_SPB>(entity =>
            {
                entity.HasKey(e => e.SPB_ID)
                    .ForSqlServerIsClustered(false);

                entity.HasIndex(e => new { e.SPB_TANGGAL, e.SPB_JAMCATAT, e.SPB_ID, e.SPB_KERANIID })
                    .HasName("IDX_DHS_SPB")
                    .IsUnique()
                    .ForSqlServerIsClustered();

                entity.Property(e => e.SPB_ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_ACTIVE)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_BJR).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SPB_CATATAN)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_ESTATE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_FOTO)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_FOTO2)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_JAMCATAT)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_JJGKETEK).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SPB_KERANIID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_LG)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_LT)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_PKS)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_SIM)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_SOPIR)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_SOPIRID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SPB_TANGGAL).HasColumnType("datetime");

                entity.Property(e => e.SPB_TIPETRUK)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_TKBM1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_TKBM2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_TKBM3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SPB_TONASE).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SPB_TOTALBRDL).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SPB_TOTALTBS).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SPB_TRUCKID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DOKETKG>(entity =>
            {
                entity.HasKey(e => e.DOKID);

                entity.Property(e => e.DOKID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BJR).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.BRDKG).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.JJG).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.JJGKG).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.SOURCE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<DimUnit>(entity =>
            {
                entity.HasKey(e => e.UnitId);

                entity.Property(e => e.UnitId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AreaId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AreaName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GB)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Group)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GroupId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IntiId)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RegionId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UnitInitial)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UnitName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JOBSCHECKSUM>(entity =>
            {
                entity.HasKey(e => new { e.UNITID, e.NAME, e.NOTE });

                entity.Property(e => e.UNITID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.VALUE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE7).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE8).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<JOBSCHECKSUMARC>(entity =>
            {
                entity.HasKey(e => new { e.UNITID, e.NAME, e.NOTE });

                entity.Property(e => e.UNITID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VALUE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE10).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE7).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE8).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE9).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<JOBSSTATUS>(entity =>
            {
                entity.HasKey(e => new { e.UNITID, e.TYPE, e.DATE });

                entity.Property(e => e.UNITID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TYPE)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<JOBSUNIT>(entity =>
            {
                entity.HasKey(e => new { e.UNITID, e.TYPE });

                entity.Property(e => e.UNITID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TYPE)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CONSTRING)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JOBSWBSTATUS>(entity =>
            {
                entity.HasKey(e => new { e.UNITID, e.TYPE, e.DATE });

                entity.Property(e => e.UNITID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TYPE)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<MABSENTTYPE>(entity =>
            {
                entity.HasKey(e => e.ABSENTCODE);

                entity.Property(e => e.ABSENTCODE)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ABSENSEX)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ABSENTDESCRIPTION)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<MACCOUNT>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PARENTCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.PARENTCODENavigation)
                    .WithMany(p => p.InversePARENTCODENavigation)
                    .HasForeignKey(d => d.PARENTCODE)
                    .HasConstraintName("FK_MACCOUNT_MACCOUNT");

                entity.HasOne(d => d.TYPE)
                    .WithMany(p => p.MACCOUNT)
                    .HasForeignKey(d => d.TYPEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MACCOUNT_MACCOUNTTYPE");
            });

            modelBuilder.Entity<MACCOUNTTYPE>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TYPE)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<MACTIVITY>(entity =>
            {
                entity.HasKey(e => e.ACTIVITYID);

                entity.Property(e => e.ACTIVITYID)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTIVITYNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.RFID)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TYPEACTIVITY)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UOM1)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UOM2)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<MACTIVITYACCOUNT>(entity =>
            {
                entity.HasKey(e => e.ACTIVITYID);

                entity.Property(e => e.ACTIVITYID)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CEHKDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CEMATDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GAHKDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GAMATDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HKCRED)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HKCREDASST)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LCHKDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LCMATDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NHKDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NMATDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RAHKDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RAMATDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TBMHKDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TBMMATDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TMHKDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TMMATDEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ACTIVITY)
                    .WithOne(p => p.MACTIVITYACCOUNT)
                    .HasForeignKey<MACTIVITYACCOUNT>(d => d.ACTIVITYID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACTIVITY");

                entity.HasOne(d => d.CEHKDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTCEHKDEBTNavigation)
                    .HasForeignKey(d => d.CEHKDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT13");

                entity.HasOne(d => d.CEMATDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTCEMATDEBTNavigation)
                    .HasForeignKey(d => d.CEMATDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT14");

                entity.HasOne(d => d.GAHKDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTGAHKDEBTNavigation)
                    .HasForeignKey(d => d.GAHKDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT1");

                entity.HasOne(d => d.GAMATDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTGAMATDEBTNavigation)
                    .HasForeignKey(d => d.GAMATDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT2");

                entity.HasOne(d => d.HKCREDNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTHKCREDNavigation)
                    .HasForeignKey(d => d.HKCRED)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT9");

                entity.HasOne(d => d.LCHKDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTLCHKDEBTNavigation)
                    .HasForeignKey(d => d.LCHKDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT4");

                entity.HasOne(d => d.LCMATDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTLCMATDEBTNavigation)
                    .HasForeignKey(d => d.LCMATDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT3");

                entity.HasOne(d => d.NHKDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTNHKDEBTNavigation)
                    .HasForeignKey(d => d.NHKDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT");

                entity.HasOne(d => d.NMATDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTNMATDEBTNavigation)
                    .HasForeignKey(d => d.NMATDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT10");

                entity.HasOne(d => d.RAHKDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTRAHKDEBTNavigation)
                    .HasForeignKey(d => d.RAHKDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT11");

                entity.HasOne(d => d.RAMATDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTRAMATDEBTNavigation)
                    .HasForeignKey(d => d.RAMATDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT12");

                entity.HasOne(d => d.TBMHKDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTTBMHKDEBTNavigation)
                    .HasForeignKey(d => d.TBMHKDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT6");

                entity.HasOne(d => d.TBMMATDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTTBMMATDEBTNavigation)
                    .HasForeignKey(d => d.TBMMATDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT5");

                entity.HasOne(d => d.TMHKDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTTMHKDEBTNavigation)
                    .HasForeignKey(d => d.TMHKDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT8");

                entity.HasOne(d => d.TMMATDEBTNavigation)
                    .WithMany(p => p.MACTIVITYACCOUNTTMMATDEBTNavigation)
                    .HasForeignKey(d => d.TMMATDEBT)
                    .HasConstraintName("FK_MACTIVITYACCOUNT_MACCOUNT7");
            });

            modelBuilder.Entity<MACTIVITYDETAIL>(entity =>
            {
                entity.HasKey(e => e.ACTIVITYID);

                entity.Property(e => e.ACTIVITYID)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.HasOne(d => d.ACTIVITY)
                    .WithOne(p => p.MACTIVITYDETAIL)
                    .HasForeignKey<MACTIVITYDETAIL>(d => d.ACTIVITYID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MACTIVITYDETAIL_MACTIVITYDETAIL");
            });

            modelBuilder.Entity<MACTIVITYMAP>(entity =>
            {
                entity.HasKey(e => e.ACTIVITYID);

                entity.Property(e => e.ACTIVITYID)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTIVITYNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ALK)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ACTIVITY)
                    .WithOne(p => p.MACTIVITYMAP)
                    .HasForeignKey<MACTIVITYMAP>(d => d.ACTIVITYID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MACTIVITYMAP_MACTIVITY");
            });

            modelBuilder.Entity<MACTIVITYRATE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTID)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.RPBORONG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.ACT)
                    .WithMany(p => p.MACTIVITYRATE)
                    .HasForeignKey(d => d.ACTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MACTIVITYRATE_MACTIVITY");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.MACTIVITYRATE)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MACTIVITYRATE_MORGANIZATION");
            });

            modelBuilder.Entity<MATTENDANCEGROUP>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BREAKEND)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1/1/00')");

                entity.Property(e => e.BREAKSTART)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1/1/00')");

                entity.Property(e => e.INEND)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(90))");

                entity.Property(e => e.INSTART)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(90))");

                entity.Property(e => e.INTIME)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(90))");

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OUTEND)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(90))");

                entity.Property(e => e.OUTSTART)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(90))");

                entity.Property(e => e.OUTTIME)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(90))");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UPDATED)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1/1/00')");
            });

            modelBuilder.Entity<MATTENDANCEGROUPITEM>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BREAKEND)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.BREAKSTART)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.GROUPID)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.OUTTIME)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('A')");

                entity.HasOne(d => d.GROUP)
                    .WithMany(p => p.MATTENDANCEGROUPITEM)
                    .HasForeignKey(d => d.GROUPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MATTENDANCEGROUPITEM_MATTENDANCEGROUP");
            });

            modelBuilder.Entity<MATTMACHINE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.IP)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MACHINETYPE).HasDefaultValueSql("((1))");

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MBLOCK>(entity =>
            {
                entity.HasKey(e => e.BLOCKID);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BJR).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.COSTCTR)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CURRENTPLANTED).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EFFDATE).HasColumnType("datetime");

                entity.Property(e => e.JENISBIBIT)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.KELASTANAH)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.LUASBLOCK).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TOPOGRAPI)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.WBS)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.BLOCK)
                    .WithOne(p => p.MBLOCK)
                    .HasForeignKey<MBLOCK>(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MBLOCK_MORGANIZATION");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.MBLOCK)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MBLOCK_MDIVISI");
            });

            modelBuilder.Entity<MBLOCKHIST>(entity =>
            {
                entity.HasKey(e => new { e.BLOCKID, e.STARTDATE });

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STARTDATE).HasColumnType("datetime");

                entity.Property(e => e.BJR).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.COSTCTR)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CURRENTPLANTED).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ENDDATE).HasColumnType("datetime");

                entity.Property(e => e.JENISBIBIT)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.KELASTANAH)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.LUASBLOCK).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TOPOGRAPI)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.WBS)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.MBLOCKHIST)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MBLOCKHIST_MORGANIZATION");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.MBLOCKHIST)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MBLOCKHIST_MDIVISI");
            });

            modelBuilder.Entity<MCARD>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACCOUNTCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ADDRESS1)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ADDRESS2)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ADDRESS3)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ADDRESS4)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TYPE)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.ACCOUNTCODENavigation)
                    .WithMany(p => p.MCARD)
                    .HasForeignKey(d => d.ACCOUNTCODE)
                    .HasConstraintName("FK_MCARD_MACCOUNT");
            });

            modelBuilder.Entity<MCOMPANY>(entity =>
            {
                entity.HasKey(e => e.LEGALID)
                    .HasName("PK_MCOMP");

                entity.Property(e => e.LEGALID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ADDR1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ADDR2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ADDR3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LOGO).HasColumnType("image");

                entity.Property(e => e.NPWP)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.POSTALCODE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.LEGAL)
                    .WithOne(p => p.MCOMPANY)
                    .HasForeignKey<MCOMPANY>(d => d.LEGALID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MCOMPANY_MORGANIZATION");
            });

            modelBuilder.Entity<MCONFIG>(entity =>
            {
                entity.HasKey(e => e.NAME);

                entity.Property(e => e.NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.VALUE)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MCURRENCY>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.COUNTRY)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RATE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.SYMBOL)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MDATE>(entity =>
            {
                entity.HasKey(e => e.Date);

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<MDIVISI>(entity =>
            {
                entity.HasKey(e => e.DIVID);

                entity.Property(e => e.DIVID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DIVASISTEN)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DIVASKEP)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.DIV)
                    .WithOne(p => p.MDIVISI)
                    .HasForeignKey<MDIVISI>(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MDIVISI_MORGANIZATION");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.MDIVISI)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MDIVISI_MUNIT");
            });

            modelBuilder.Entity<MDOCSTATUS>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MDOWNLOADTYPE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.MENUID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });


            modelBuilder.Entity<TLOANEMP>(entity =>
            {
                entity.HasKey(e => e.TRANID);

                entity.Property(e => e.TRANID)
                   .HasMaxLength(20)
                   .IsUnicode(false)
                   .ValueGeneratedNever();

                entity.Property(e => e.LOANDATE).HasColumnType("datetime");

                entity.Property(e => e.UNITID)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.NOTE)
                   .HasMaxLength(100)
                   .IsUnicode(false);

                entity.Property(e => e.TENOR).HasColumnType("int");

                entity.Property(e => e.TOTAL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                   .IsRequired()
                   .HasMaxLength(1)
                   .IsUnicode(false);

                entity.Property(e => e.CREATEDBY)
                   .IsRequired()
                   .HasMaxLength(20)
                   .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                   .IsRequired()
                   .HasMaxLength(20)
                   .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");
                entity.Property(e => e.UPDATED).HasColumnType("datetime");


                entity.HasOne(d => d.MEMPLOYEE)
                   .WithMany(p => p.TLOANEMP)
                   .HasForeignKey(d => d.EMPID)
                   .OnDelete(DeleteBehavior.ClientSetNull)
                   .HasConstraintName("FK_TLOANEMP_MEMPLOYEE");

            });

            modelBuilder.Entity<TLOANEMPITEM>(entity =>
            {
                entity.HasKey(e => e.ID);

                entity.Property(e => e.ID)
                   .HasMaxLength(20)
                   .IsUnicode(false)
                   .ValueGeneratedNever();

                entity.Property(e => e.SEQ)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.MATERIALID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACCOUNTCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PRICE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BLOCKID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DETAILNOTE)
                   .HasMaxLength(100)
                   .IsUnicode(false);


                entity.HasOne(d => d.LOAN)
                   .WithMany(p => p.TLOANEMPITEM)
                   .HasForeignKey(d => d.TRANID)
                   .OnDelete(DeleteBehavior.ClientSetNull)
                   .HasConstraintName("FK_TLOANEMPITEM_TLOANEMP");

            });

            modelBuilder.Entity<TLOANEMPTENOR>(entity =>
            {
                entity.HasKey(e => e.ID);

                entity.Property(e => e.ID)
                   .HasMaxLength(20)
                   .IsUnicode(false)
                   .ValueGeneratedNever();

                entity.Property(e => e.TENORDATE).HasColumnType("datetime");

                entity.Property(e => e.UNITID)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TYPE)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.AMOUNT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TENOR).HasColumnType("int");

                entity.Property(e => e.INSTALLMENT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.REF)
                   .IsRequired()
                   .HasMaxLength(50)
                   .IsUnicode(false);

                entity.Property(e => e.PAYMENTNO)
                   .IsRequired()
                   .HasMaxLength(20)
                   .IsUnicode(false);

                entity.Property(e => e.NOTE)
                   .HasMaxLength(100)
                   .IsUnicode(false);

                entity.Property(e => e.STATUS)
                   .IsRequired()
                   .HasMaxLength(1)
                   .IsUnicode(false);

                entity.Property(e => e.CREATEDBY)
                   .IsRequired()
                   .HasMaxLength(20)
                   .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                   .IsRequired()
                   .HasMaxLength(20)
                   .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");
                entity.Property(e => e.UPDATED).HasColumnType("datetime");

            });


            modelBuilder.Entity<MEMPLOYEE>(entity =>
            {
                entity.HasKey(e => e.EMPID);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ATTENDGROUPID)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BASICWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BIRTHDAY).HasColumnType("datetime");

                entity.Property(e => e.BPJSKES)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EDUCATION)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EMPCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EMPSEX)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.EMPTYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.GOLONGAN)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.JOINTDATE).HasColumnType("datetime");

                entity.Property(e => e.KOPERASIDEDUCTION).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KOTAASAL)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KTPADDRESS)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KTPID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NOSPK)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NPWP)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PLACEOFBIRTH)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.POSITIONID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.PROVINSI)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RACE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RELIGION)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RESIGNEDDATE).HasColumnType("datetime");

                entity.Property(e => e.SALARYPRD1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.SPOUSEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SPSIDEDUCTION).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.STATUSID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SUPERVISORID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.MEMPLOYEE)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MEMPLOYEE_MDIVISI");

                entity.HasOne(d => d.EMPTYPENavigation)
                    .WithMany(p => p.MEMPLOYEE)
                    .HasForeignKey(d => d.EMPTYPE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MEMPLOYEE_MEMPLOYEETYPE");

                entity.HasOne(d => d.POSITION)
                    .WithMany(p => p.MEMPLOYEE)
                    .HasForeignKey(d => d.POSITIONID)
                    .HasConstraintName("FK_MEMPLOYEE_MPOSITION");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.MEMPLOYEE)
                    .HasForeignKey(d => d.STATUSID)
                    .HasConstraintName("FK_MEMPLOYEE_MSTATUS");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.MEMPLOYEE)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MEMPLOYEE_MUNIT");
            });

            modelBuilder.Entity<MEMPLOYEEBANK>(entity =>
            {
                entity.HasKey(e => e.EMPID);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BANKID)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BPJSBASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BPJSKESEHATANBASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BPJSKESEHATANET)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BPJSKESEHATANNO)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BPJSKETENAGAKERJAANNO)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BPJSKETENAGAKERJAANNPP)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NO)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.EMP)
                    .WithOne(p => p.MEMPLOYEEBANK)
                    .HasForeignKey<MEMPLOYEEBANK>(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MEMPLOYEEBANK_MEMPLOYEE");
            });

            modelBuilder.Entity<MEMPLOYEEFAMILY>(entity =>
            {
                entity.HasKey(e => new { e.EMPID, e.KTPID });

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.KTPID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BIRTHDAY).HasColumnType("datetime");

                entity.Property(e => e.EDUCATION)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FULLNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GENDER)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.PLACEOFBIRTH)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RELATIONSHIP)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.MEMPLOYEEFAMILY)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MEMPLOYEEFAMILY_MEMPLOYEE");
            });

            modelBuilder.Entity<MEMPLOYEEFILE>(entity =>
            {
                entity.HasKey(e => new { e.EMPID, e.FILEID });

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DESCRIPTION)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FILENAME)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FILETYPE)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.MEMPLOYEEFILE)
                    .HasForeignKey(d => d.EMPID)
                    .HasConstraintName("FK_MEMPLOYEEREFILE_MEMPLOYEE");
            });

            modelBuilder.Entity<MEMPLOYEEHISTORY>(entity =>
            {
                entity.HasKey(e => new { e.EMPID, e.STARTDATE });

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STARTDATE).HasColumnType("date");

                entity.Property(e => e.BASICWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPTYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ENDDATE).HasColumnType("date");

                entity.Property(e => e.POSITIONID)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.STATUSID)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.MEMPLOYEEHISTORY)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MEMPLOYEEHISTORY_MDIVISI");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.MEMPLOYEEHISTORY)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MEMPLOYEEHISTORY_MEMPLOYEE");

                entity.HasOne(d => d.EMPTYPENavigation)
                    .WithMany(p => p.MEMPLOYEEHISTORY)
                    .HasForeignKey(d => d.EMPTYPE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MEMPLOYEEHISTORY_MEMPLOYEETYPE");

                entity.HasOne(d => d.POSITION)
                    .WithMany(p => p.MEMPLOYEEHISTORY)
                    .HasForeignKey(d => d.POSITIONID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MEMPLOYEEHISTORY_MPOSITION");

                entity.HasOne(d => d.STATUS)
                    .WithMany(p => p.MEMPLOYEEHISTORY)
                    .HasForeignKey(d => d.STATUSID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MEMPLOYEEHISTORY_MSTATUS");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.MEMPLOYEEHISTORY)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MEMPLOYEEHISTORY_MUNIT");
            });

            modelBuilder.Entity<MEMPLOYEETYPE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CODE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HVTCODE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<MHARVESTTYPE>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE).ValueGeneratedNever();

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MJAMSOSTEK>(entity =>
            {
                entity.HasKey(e => e.UNITCODE);

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BKSPPS).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.EMPLOYEE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ENTERPRISE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JKK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JKM).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JPCOMP).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JPEMP).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JPMAX).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KESCOMP).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KESEMP).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MAXPOSBENEFIT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NPWP).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.POSBENEFIT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PTKPM).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PTKPM1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PTKPM2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PTKPM3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PTKPS).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithOne(p => p.MJAMSOSTEK)
                    .HasForeignKey<MJAMSOSTEK>(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MJAMSOSTEK_MUNIT");
            });

            modelBuilder.Entity<MJOURNALTYPE>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.MODUL)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MMATERIAL>(entity =>
            {
                entity.HasKey(e => e.MATERIALID)
                    .HasName("PK_MBAHAN");

                entity.Property(e => e.MATERIALID)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACCOUNTCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEDATE).HasColumnType("datetime");

                entity.Property(e => e.MATERIALNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UOM)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.ACCOUNTCODENavigation)
                    .WithMany(p => p.MMATERIAL)
                    .HasForeignKey(d => d.ACCOUNTCODE)
                    .HasConstraintName("FK_MMATERIAL_MACCOUNT");
            });

            modelBuilder.Entity<MMENU>(entity =>
            {
                entity.HasKey(e => e.MENUCODE);

                entity.Property(e => e.MENUCODE)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ALIAS)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PARENTCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TEXT)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<MMENUACCESS>(entity =>
            {
                entity.HasKey(e => new { e.CODE, e.PART, e.PERMISSION })
                    .HasName("PK_MMENUACCESS_1");

                entity.Property(e => e.CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PART)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PERMISSION)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.CODENavigation)
                    .WithMany(p => p.MMENUACCESS)
                    .HasForeignKey(d => d.CODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MMENUACCESS_MMENU");
            });

            modelBuilder.Entity<MMILL>(entity =>
            {
                entity.HasKey(e => e.MILLCODE);

                entity.Property(e => e.MILLCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.MILLNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<MMONTH>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MORGANIZATION>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TYPE)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<MPAYMENTSCHEME>(entity =>
            {
                entity.HasKey(e => e.UNITCODE);

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BHLDAILYWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CHECKERPREMIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.KRANIBRONDOLBHL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KRANIBRONDOLSKU).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KRANIPENALTYPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KRANIPREMIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KRANIPREMIPCTBHL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDOR1PENALTYPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDOR1PREMIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORBRONDOLPENALTYPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORBRONDOLPREMIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORBRONDOLPREMIPCTBHL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORPENALTYPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORPREMIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORPREMIPCTBHL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PENSIONCOMPANY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PENSIONEMPLOYEE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PENSIONFUND).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIBASEDCALCULATION)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PREMISYSTEM)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PROVINCEWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RATEINBHL).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.RATEINKRN).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.RATEINMDR1).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.RATEINNDR).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.RATEINSKU).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.RICECHILDREN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RICEEMPLOYEE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RICEPAIDASMONEY)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RICEWIFE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.SKUDAILYWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TAXPAIDBYGOVERMENT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.PREMISYSTEMNavigation)
                    .WithMany(p => p.MPAYMENTSCHEME)
                    .HasForeignKey(d => d.PREMISYSTEM)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPAYMENTSCHEME_MPREMISYSTEM");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithOne(p => p.MPAYMENTSCHEME)
                    .HasForeignKey<MPAYMENTSCHEME>(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPAYMENTSCHEME_MUNIT");
            });

            modelBuilder.Entity<MPAYROLLACCOUNT>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACCOUNT1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACCOUNT2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACCOUNT3)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACCOUNT4)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ACCOUNT1Navigation)
                    .WithMany(p => p.MPAYROLLACCOUNTACCOUNT1Navigation)
                    .HasForeignKey(d => d.ACCOUNT1)
                    .HasConstraintName("FK_MPAYROLLACCOUNT_MACCOUNT");

                entity.HasOne(d => d.ACCOUNT2Navigation)
                    .WithMany(p => p.MPAYROLLACCOUNTACCOUNT2Navigation)
                    .HasForeignKey(d => d.ACCOUNT2)
                    .HasConstraintName("FK_MPAYROLLACCOUNT_MACCOUNT1");

                entity.HasOne(d => d.ACCOUNT3Navigation)
                    .WithMany(p => p.MPAYROLLACCOUNTACCOUNT3Navigation)
                    .HasForeignKey(d => d.ACCOUNT3)
                    .HasConstraintName("FK_MPAYROLLACCOUNT_MACCOUNT2");

                entity.HasOne(d => d.ACCOUNT4Navigation)
                    .WithMany(p => p.MPAYROLLACCOUNTACCOUNT4Navigation)
                    .HasForeignKey(d => d.ACCOUNT4)
                    .HasConstraintName("FK_MPAYROLLACCOUNT_MACCOUNT3");
            });

            modelBuilder.Entity<MPENALTY>(entity =>
            {
                entity.HasKey(e => e.PENALTYID);

                entity.HasIndex(e => new { e.UNITCODE, e.PENALTYCODE })
                    .HasName("IX_MPENALTY")
                    .IsUnique();

                entity.Property(e => e.PENALTYID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AMOUNT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEDDATE).HasColumnType("datetime");

                entity.Property(e => e.PENALTYCODE)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.REMARK)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEDDATE).HasColumnType("datetime");

                entity.HasOne(d => d.PENALTYCODENavigation)
                    .WithMany(p => p.MPENALTY)
                    .HasForeignKey(d => d.PENALTYCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPENALTY_MPENALTYTYPE");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.MPENALTY)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPENALTY_MUNIT");
            });

            modelBuilder.Entity<MPENALTYTYPE>(entity =>
            {
                entity.HasKey(e => e.PENALTYCODE);

                entity.Property(e => e.PENALTYCODE)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DESCRIPTION)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<MPERIOD>(entity =>
            {
                entity.HasKey(e => e.PERIODCODE);

                entity.HasIndex(e => new { e.UNITCODE, e.MONTH, e.YEAR })
                    .HasName("IX_MPERIOD");

                entity.Property(e => e.PERIODCODE)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.FROM1).HasColumnType("datetime");

                entity.Property(e => e.FROM2).HasColumnType("datetime");

                entity.Property(e => e.REMARK)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RICEPRICE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RICEPRICE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TO1).HasColumnType("datetime");

                entity.Property(e => e.TO2).HasColumnType("datetime");

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.MPERIOD)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPERIOD_MUNIT");
            });

            modelBuilder.Entity<MPOSITION>(entity =>
            {
                entity.HasKey(e => e.POSITIONID);

                entity.Property(e => e.POSITIONID)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.GENDERFLAG)
                  .HasMaxLength(1)
                  .IsUnicode(false);

                entity.Property(e => e.POSFLAG).HasDefaultValueSql("((999))");

                entity.Property(e => e.POSITIONNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.GROUP)
                    .WithMany(p => p.MPOSITION)
                    .HasForeignKey(d => d.GROUPID)
                    .HasConstraintName("FK_MPOSITION_MPOSITIONGROUP");
            });

            modelBuilder.Entity<MPOSITIONDETAIL>(entity =>
            {
                entity.HasKey(e => new { e.UNITID, e.POSID });

                entity.Property(e => e.UNITID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.POSID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.POS)
                    .WithMany(p => p.MPOSITIONDETAIL)
                    .HasForeignKey(d => d.POSID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPOSITIONDETAIL_MPOSITION");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.MPOSITIONDETAIL)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPOSITIONDETAIL_MORGANIZATION");
            });

            modelBuilder.Entity<MPOSITIONGROUP>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MPREMIMUAT>(entity =>
            {
                entity.HasKey(e => e.PREMIMUATID);

                entity.Property(e => e.PREMIMUATID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.BASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASISGROUP)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DESCRIPTION)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEETYPE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EXCEED1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RPBORONG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.VEHICLETYPEID)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.ACT)
                    .WithMany(p => p.MPREMIMUAT)
                    .HasForeignKey(d => d.ACTID)
                    .HasConstraintName("FK_MPREMIMUAT_MACTIVITY");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.MPREMIMUAT)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPREMIMUAT_MDOCSTATUS");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.MPREMIMUAT)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPREMIMUAT_MUNIT");
            });

            modelBuilder.Entity<MPREMIMUATBLOCK>(entity =>
            {
                entity.HasKey(e => new { e.PREMIMUATID, e.BLOCKID });

                entity.Property(e => e.PREMIMUATID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.MPREMIMUATBLOCK)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPREMIMUATBLOCK_MBLOCK");

                entity.HasOne(d => d.PREMIMUAT)
                    .WithMany(p => p.MPREMIMUATBLOCK)
                    .HasForeignKey(d => d.PREMIMUATID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPREMIMUATBLOCK_MPREMIMUAT");
            });

            modelBuilder.Entity<MPREMIOPERATOR>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTIVITYID)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.BASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASISGROUP)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DESCRIPTION)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.EXCEED1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LOWERRANGE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RPBORONG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPPERRANGE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VEHICLETYPEID)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.ACTIVITY)
                    .WithMany(p => p.MPREMIOPERATOR)
                    .HasForeignKey(d => d.ACTIVITYID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPREMIOPERATOR_MACTIVITY");

                entity.HasOne(d => d.PRODUCT)
                    .WithMany(p => p.MPREMIOPERATOR)
                    .HasForeignKey(d => d.PRODUCTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPREMIOPERATOR_MPRODUCT");

                entity.HasOne(d => d.VEHICLETYPE)
                    .WithMany(p => p.MPREMIOPERATOR)
                    .HasForeignKey(d => d.VEHICLETYPEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPREMIOPERATOR_MVEHICLETYPE");
            });

            modelBuilder.Entity<MPREMIPANEN>(entity =>
            {
                entity.HasKey(e => e.PREMIPANENID);

                entity.Property(e => e.PREMIPANENID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ATTPREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASISGROUP)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DBASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DBASE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DBASE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DESCRIPTION)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DEXCEED1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DEXCEED2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DEXCEED3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DPREMI1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DPREMI2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DPREMI3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EMPLOYEETYPE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EXCEED1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GBASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GBASE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GBASE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GERDANBASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GEXCEED1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GEXCEED2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GEXCEED3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GPREMI1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GPREMI2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GPREMI3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HABASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HAPREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PKKTGI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RPBORONG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.ACT)
                    .WithMany(p => p.MPREMIPANEN)
                    .HasForeignKey(d => d.ACTID)
                    .HasConstraintName("FK_MPREMIPANEN_MACTIVITY");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.MPREMIPANEN)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPREMIPANEN_MDOCSTATUS");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.MPREMIPANEN)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPREMIPANEN_MUNIT");
            });

            modelBuilder.Entity<MPREMIPANENBLOCK>(entity =>
            {
                entity.HasKey(e => new { e.PREMIPANENID, e.BLOCKID });

                entity.HasIndex(e => new { e.PREMIPANENID, e.BLOCKID })
                    .HasName("IX_MPREMIPANENBLOCK")
                    .IsUnique();

                entity.Property(e => e.PREMIPANENID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.MPREMIPANENBLOCK)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPREMIPANENBLOCK_MBLOCK");

                entity.HasOne(d => d.PREMIPANEN)
                    .WithMany(p => p.MPREMIPANENBLOCK)
                    .HasForeignKey(d => d.PREMIPANENID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPREMIPANENBLOCK_MPREMIPANEN");
            });

            modelBuilder.Entity<MPREMIRUNNINGACCOUNT>(entity =>
            {
                entity.HasKey(e => e.PREMIRUNNINGACCOUNTID);

                entity.Property(e => e.PREMIRUNNINGACCOUNTID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.BASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASISGROUP)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DESCRIPTION)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EXCEED1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OPERATORTYPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PREMI1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMISYSTEM)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RANGE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RANGE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RUNNINGACCOUNTTYPE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.MPREMIRUNNINGACCOUNT)
                    .HasForeignKey(d => d.STATUS)
                    .HasConstraintName("FK_MPREMIRUNNINGACCOUNT_MDOCSTATUS");
            });

            modelBuilder.Entity<MPREMIRUNNINGACCOUNTID>(entity =>
            {
                entity.HasKey(e => new { e.PREMIRUNNINGACCOUNTID, e.RUNNINGACCOUNTID });

                entity.Property(e => e.PREMIRUNNINGACCOUNTID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RUNNINGACCOUNTID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MPREMISYSTEM>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MPRODUCT>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MQLYCAT>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PROD)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MRANGE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DISTANCE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FROM)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.FROMNavigation)
                    .WithMany(p => p.MRANGEFROMNavigation)
                    .HasForeignKey(d => d.FROM)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MRANGE_MORGANIZATION");

                entity.HasOne(d => d.TONavigation)
                    .WithMany(p => p.MRANGETONavigation)
                    .HasForeignKey(d => d.TO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MRANGE_MORGANIZATION1");
            });

            modelBuilder.Entity<MROLEFORM>(entity =>
            {
                entity.HasKey(e => new { e.ROLEID, e.MENUCODE });

                entity.Property(e => e.ROLEID)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.MENUCODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.MENU)
                    .WithMany(p => p.MROLEFORM)
                    .HasForeignKey(d => d.MENUCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MROLEFORM_MMENU");

                entity.HasOne(d => d.ROLE)
                    .WithMany(p => p.MROLEFORM)
                    .HasForeignKey(d => d.ROLEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MROLEFORM_MROLEUSER");
            });

            modelBuilder.Entity<MROLEUSER>(entity =>
            {
                entity.HasKey(e => e.ROLEID);

                entity.Property(e => e.ROLEID)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.ROLENAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<MRUNNINGACCOUNT>(entity =>
            {
                entity.HasKey(e => e.RUNNINGACCOUNTID)
                    .HasName("PK_MRUNNINGACCOUNT_1");

                entity.Property(e => e.RUNNINGACCOUNTID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.RUNNINGACCOUNTNAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RUNNINGACCOUNTYPE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UOM)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.RUNNINGACCOUNTYPENavigation)
                    .WithMany(p => p.MRUNNINGACCOUNT)
                    .HasForeignKey(d => d.RUNNINGACCOUNTYPE)
                    .HasConstraintName("FK_MRUNNINGACCOUNT_MRUNNINGACCOUNTTYPE");
            });

            modelBuilder.Entity<MRUNNINGACCOUNTTYPE>(entity =>
            {
                entity.HasKey(e => e.CODE)
                    .HasName("PK_MRUNNINGACCOUNTTYPE_1");

                entity.Property(e => e.CODE)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UOM)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MRUNNUMBER>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<MSALARYTYPE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AUTO)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.DEDUCT).HasDefaultValueSql("((0))");

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PAYCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SLIPNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SYSCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<MSCHEDULEEMPLOYEE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BREAKEND).HasColumnType("datetime");

                entity.Property(e => e.BREAKSTART).HasColumnType("datetime");

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.EMPLOYEEID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.INEND).HasColumnType("datetime");

                entity.Property(e => e.INSTART).HasColumnType("datetime");

                entity.Property(e => e.INTIME).HasColumnType("datetime");

                entity.Property(e => e.OUTEND).HasColumnType("datetime");

                entity.Property(e => e.OUTSTART).HasColumnType("datetime");

                entity.Property(e => e.OUTTIME).HasColumnType("datetime");

                entity.Property(e => e.WORKHOUR).HasDefaultValueSql("((0))");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.MSCHEDULEEMPLOYEE)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MSCHEDULEEMPLOYEE_MEMPLOYEE");
            });

            modelBuilder.Entity<MSTATUS>(entity =>
            {
                entity.HasKey(e => e.STATUSID);

                entity.Property(e => e.STATUSID)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ABSENSEX)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.FAMILYSTATUS)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.STATUSNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TAXSTATUS)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<MSTORELOCATION>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CSPO).HasDefaultValueSql("((0))");

                entity.Property(e => e.LOCID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.LOC)
                    .WithMany(p => p.MSTORELOCATION)
                    .HasForeignKey(d => d.LOCID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MSTORELOCATION_MORGANIZATION");
            });

            modelBuilder.Entity<MTPH>(entity =>
            {
                entity.HasKey(e => e.TPHID);

                entity.Property(e => e.TPHID)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BLOCKID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CODE)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LAT)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LONG)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.MTPH)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MTPH_MORGANIZATION");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.MTPH)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MTPH_MDIVISI");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.MTPH)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MTPH_MUNIT");
            });

            modelBuilder.Entity<MUNIT>(entity =>
            {
                entity.HasKey(e => e.UNITCODE);

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ADDR1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ADDR2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ADDR3)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ALIAS)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.INTIID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LEGALID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.POSTALCODE)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RSPO)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UNITKTU)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UNITMGR)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.LEGAL)
                    .WithMany(p => p.MUNIT)
                    .HasForeignKey(d => d.LEGALID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MUNIT_MCOMPANY");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithOne(p => p.MUNIT)
                    .HasForeignKey<MUNIT>(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MUNIT_MORGANIZATION");
            });

            modelBuilder.Entity<MUNITDBSERVER>(entity =>
            {
                entity.HasKey(e => e.UNITCODE);

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DBNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DBPASSWORD)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DBUSER)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SERVERNAME)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MUNITPLASMA>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.INTIID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MUPKEEPTYPE>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE).ValueGeneratedNever();

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MUSERMASTER>(entity =>
            {
                entity.HasKey(e => e.USERID);

                entity.Property(e => e.USERID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.EXPIRED)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(2020))");

                entity.Property(e => e.LOCID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ROLEID)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.USERNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.USERPASS)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.ROLE)
                    .WithMany(p => p.MUSERMASTER)
                    .HasForeignKey(d => d.ROLEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MUSERMASTER_MROLEUSER");
            });

            modelBuilder.Entity<MVEHICLE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CODE)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DRIVER)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DRIVERID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HELPERID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SIM)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TYPEID)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.DRIVERNavigation)
                    .WithMany(p => p.MVEHICLEDRIVERNavigation)
                    .HasForeignKey(d => d.DRIVERID)
                    .HasConstraintName("FK_MVEHICLE_MEMPLOYEE");

                entity.HasOne(d => d.HELPER)
                    .WithMany(p => p.MVEHICLEHELPER)
                    .HasForeignKey(d => d.HELPERID)
                    .HasConstraintName("FK_MVEHICLE_MEMPLOYEE1");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.MVEHICLE)
                    .HasForeignKey(d => d.UNITID)
                    .HasConstraintName("FK_MVEHICLE_MORGANIZATION");
            });

            modelBuilder.Entity<MVEHICLETYPE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.HMKM)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            

            

            

            

            modelBuilder.Entity<REMPATT>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.HK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HVTBHLHK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HVTBHLQTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HVTSKUBHK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HVTSKUBQTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HVTSKUHHK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HVTSKUHQTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPBHLHK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPBHLQTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPSKUBHK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPSKUBQTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPSKUHHK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPSKUHQTY).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.REMPATT)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_REMPATT_MUNIT");
            });

            modelBuilder.Entity<RLABOUR>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.IMATAREA).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MATAREA).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<RLABOURITM>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.LABID)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.LAB)
                    .WithMany(p => p.RLABOURITM)
                    .HasForeignKey(d => d.LABID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RLABOURITM_RLABOUR");

                entity.HasOne(d => d.POS)
                    .WithMany(p => p.RLABOURITM)
                    .HasForeignKey(d => d.POSID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RLABOURITM_RPOS");
            });

            modelBuilder.Entity<RPOS>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.GROUP)
                    .WithMany(p => p.RPOS)
                    .HasForeignKey(d => d.GROUPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RPOS_RPOSGROUP");
            });

            modelBuilder.Entity<RPOSGROUP>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SAPPARAM>(entity =>
            {
                entity.Property(e => e.ID).ValueGeneratedNever();

                entity.Property(e => e.DEST)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FILETYPE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FROM).HasColumnType("datetime");

                entity.Property(e => e.MAILFROM)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MAILTO)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SRC)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TO).HasColumnType("datetime");
            });

            modelBuilder.Entity<SAPPAYROLLACCOUNT>(entity =>
            {
                entity.HasKey(e => e.NAME);

                entity.Property(e => e.NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACC1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Acc2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PK1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PK2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SAPPAYROLLCOSTCTR>(entity =>
            {
                entity.HasKey(e => new { e.DIVID, e.POSID })
                    .HasName("PK_SAPPAYROLLCOSTCTR_1");

                entity.Property(e => e.DIVID)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.POSID)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.COSTCTR)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SAPUNIT>(entity =>
            {
                entity.HasKey(e => e.UNITCODE);

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.MAIL)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<SAPUPKEEPRESULT>(entity =>
            {
                entity.HasKey(e => new { e.CODE, e.DATETIME });

                entity.Property(e => e.CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DATETIME).HasColumnType("datetime");

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SPBKG>(entity =>
            {
                entity.HasKey(e => e.SPBID);

                entity.Property(e => e.SPBID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DATEIN).HasColumnType("datetime");

                entity.Property(e => e.NETTO).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.SOURCE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.WEIGHT1).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.WEIGHT2).HasColumnType("decimal(9, 2)");
            });

            modelBuilder.Entity<SYNCDOWNLOAD>(entity =>
            {
                entity.HasKey(e => new { e.SOURCE, e.UNITID });

                entity.Property(e => e.SOURCE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.STARTDATE).HasColumnType("datetime");
            });

            modelBuilder.Entity<SYNCTABLELIST>(entity =>
            {
                entity.HasKey(e => e.NAME);

                entity.Property(e => e.NAME)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.PKEYS)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.QUERY)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TACCOUNTHISTORY>(entity =>
            {
                entity.HasKey(e => new { e.CODE, e.SEQ });

                entity.Property(e => e.CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACCOUNTCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AMOUNT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ACCOUNTCODENavigation)
                    .WithMany(p => p.TACCOUNTHISTORY)
                    .HasForeignKey(d => d.ACCOUNTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TACCOUNTHISTORY_MACCOUNT");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TACCOUNTHISTORY)
                    .HasForeignKey(d => d.BLOCKID)
                    .HasConstraintName("FK_TACCOUNTHISTORY_MORGANIZATION");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TACCOUNTHISTORY)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TACCOUNTHISTORY_MDOCSTATUS");

                entity.HasOne(d => d.TYPENavigation)
                    .WithMany(p => p.TACCOUNTHISTORY)
                    .HasForeignKey(d => d.TYPE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TACCOUNTHISTORY_MJOURNALTYPE");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TACCOUNTHISTORY)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TACCOUNTHISTORY_MUNIT");
            });

            modelBuilder.Entity<TACTIVITYMATERIALMAP>(entity =>
            {
                entity.HasKey(e => new { e.ACTIVITYID, e.MATERIALID });

                entity.Property(e => e.ACTIVITYID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.MATERIALID)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.ACTIVITY)
                    .WithMany(p => p.TACTIVITYMATERIALMAP)
                    .HasForeignKey(d => d.ACTIVITYID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TACTIVITYMATERIALMAP_MACTIVITY");

                entity.HasOne(d => d.MATERIAL)
                    .WithMany(p => p.TACTIVITYMATERIALMAP)
                    .HasForeignKey(d => d.MATERIALID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TACTIVITYMATERIALMAP_MMATERIAL");
            });

            modelBuilder.Entity<TAPPROVAL>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.TYPE });

                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TYPE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DOCID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TATTENDANCE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ABSENTCODE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEDDATE).HasColumnType("datetime");

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.REF)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REMARK)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEDDATE).HasColumnType("datetime");

                entity.HasOne(d => d.ABSENTCODENavigation)
                    .WithMany(p => p.TATTENDANCE)
                    .HasForeignKey(d => d.ABSENTCODE)
                    .HasConstraintName("FK_TATTENDANCE_MABSENTTYPE");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TATTENDANCE)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TATTENDANCE_MDIVISI");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.TATTENDANCE)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TATTENDANCE_MEMPLOYEE");
            });

            modelBuilder.Entity<TATTENDANCELOG>(entity =>
            {

                entity.HasKey(e => new { e.EMPID, e.PIN, e.DATETIME });

                entity.Property(e => e.EMPID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DATETIME).HasColumnType("datetime");

                entity.Property(e => e.DEVICE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(90))");


                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.TATTENDANCELOG)
                    .HasForeignKey(d => d.EMPID);
            });

            modelBuilder.Entity<TATTENDANCESPL>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NO)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OVERTIME).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.TATTENDANCESPL)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TATTENDANCESPL_MEMPLOYEE");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TATTENDANCESPL)
                    .HasForeignKey(d => d.UNITID)
                    .HasConstraintName("FK_TATTENDANCESPL_MORGANIZATION");
            });

            modelBuilder.Entity<TATTENDANCETRX>(entity =>
            {
                entity.HasKey(e => new { e.UNITID, e.EMPID, e.DATE })
                    .HasName("PK_TATTENDANCETRX_1");

                entity.Property(e => e.UNITID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.ATTSTATUS)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BREAKEND)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.BREAKSTART)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.CARDIN)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CARDOUT)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CHECKIN).HasColumnType("datetime");

                entity.Property(e => e.CHECKOUT).HasColumnType("datetime");

                entity.Property(e => e.HKPAID).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.INEND)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.INSTART)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.INSTATUS)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.INTIME)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.OT150).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OT200).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OT300).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OT400).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUTEND)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.OUTSTART)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.OUTSTATUS)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OUTTIME)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.OVERTIME).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PIN)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SPL).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WORKACTUAL)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.TATTENDANCETRX)
                    .HasForeignKey(d => d.EMPID);
            });

            modelBuilder.Entity<TBUDGETPROD>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TCALENDAR>(entity =>
            {
                entity.HasKey(e => new { e.UNITCODE, e.DTDATE });

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DTDATE).HasColumnType("datetime");

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.REMARK)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TCALENDAR)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCALENDAR_MUNIT");
            });

            modelBuilder.Entity<TCAPPINGEMP>(entity =>
            {
                entity.HasKey(e => e.ID);

                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("date");
                
                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.NOTE)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TCAPPINGEMP)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCAPPINGEMP_MUNIT");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TCAPPINGEMP)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCAPPINGEMP_MDIVISI");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.TCAPPINGEMP)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCAPPINGEMP_MEMPLOYEE");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TCAPPINGEMP)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCAPPINGEMP_MDOCSTATUS");

            });

            modelBuilder.Entity<TCLOSEYEAR>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TCLOSEYEAR)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCLOSEYEAR_MORGANIZATION");
            });

            modelBuilder.Entity<TCOGS>(entity =>
            {
                entity.HasKey(e => new { e.CODE, e.UNITCODE, e.MATERIALID, e.DATE });

                entity.Property(e => e.CODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MATERIALID)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.PRICE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.MATERIAL)
                    .WithMany(p => p.TCOGS)
                    .HasForeignKey(d => d.MATERIALID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCOGS_MMATERIAL");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TCOGS)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCOGS_MUNIT");
            });

            modelBuilder.Entity<TCONTRACT>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CARDID)                    
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.ENDDATE).HasColumnType("datetime");

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STARTDATE).HasColumnType("datetime");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.CARD)
                    .WithMany(p => p.TCONTRACT)
                    .HasForeignKey(d => d.CARDID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCONTRACT_MCARD");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TCONTRACT)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCONTRACT_MORGANIZATION");
            });

            modelBuilder.Entity<TCONTRACTITEM>(entity =>
            {
                entity.HasKey(e => new { e.CONTID, e.ACTID });

                entity.Property(e => e.CONTID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ACTID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.OUTPUT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PRICE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.USED).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.ACT)
                    .WithMany(p => p.TCONTRACTITEM)
                    .HasForeignKey(d => d.ACTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCONTRACTITEM_MACTIVITY");

                entity.HasOne(d => d.CONT)
                    .WithMany(p => p.TCONTRACTITEM)
                    .HasForeignKey(d => d.CONTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCONTRACTITEM_TCONTRACT");
            });

            modelBuilder.Entity<TEMPLOYEECHANGE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.EFFECTIVEDATE).HasColumnType("datetime");
                entity.Property(e => e.BASICWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPTYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NEWBASICWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWDIVID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NEWEMPTYPE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NEWPOSITIONID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.NEWSTATUSID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.NEWUNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.POSITIONID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.STATUSID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TEMPLOYEECHANGEDIV)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMPLOYEECHANGE_MDIVISI");

                entity.HasOne(d => d.EMPTYPENavigation)
                    .WithMany(p => p.TEMPLOYEECHANGEEMPTYPENavigation)
                    .HasForeignKey(d => d.EMPTYPE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMPLOYEECHANGE_MEMPLOYEETYPE");

                entity.HasOne(d => d.NEWDIV)
                    .WithMany(p => p.TEMPLOYEECHANGENEWDIV)
                    .HasForeignKey(d => d.NEWDIVID)
                    .HasConstraintName("FK_TEMPLOYEECHANGE_MDIVISINEW");

                entity.HasOne(d => d.NEWEMPTYPENavigation)
                    .WithMany(p => p.TEMPLOYEECHANGENEWEMPTYPENavigation)
                    .HasForeignKey(d => d.NEWEMPTYPE)
                    .HasConstraintName("FK_TEMPLOYEECHANGE_MEMPLOYEETYPENEW");

                entity.HasOne(d => d.NEWPOSITION)
                    .WithMany(p => p.TEMPLOYEECHANGENEWPOSITION)
                    .HasForeignKey(d => d.NEWPOSITIONID)
                    .HasConstraintName("FK_TEMPLOYEECHANGE_MPOSITIONNEW");

                entity.HasOne(d => d.NEWSTATUS)
                    .WithMany(p => p.TEMPLOYEECHANGENEWSTATUS)
                    .HasForeignKey(d => d.NEWSTATUSID)
                    .HasConstraintName("FK_TEMPLOYEECHANGE_MSTATUSNEW");

                entity.HasOne(d => d.NEWUNITCODENavigation)
                    .WithMany(p => p.TEMPLOYEECHANGENEWUNITCODENavigation)
                    .HasForeignKey(d => d.NEWUNITCODE)
                    .HasConstraintName("FK_TEMPLOYEECHANGE_MUNITNEW");

                entity.HasOne(d => d.POSITION)
                    .WithMany(p => p.TEMPLOYEECHANGEPOSITION)
                    .HasForeignKey(d => d.POSITIONID)
                    .HasConstraintName("FK_TEMPLOYEECHANGE_MPOSITION");

                entity.HasOne(d => d.STATUS)
                    .WithMany(p => p.TEMPLOYEECHANGESTATUS)
                    .HasForeignKey(d => d.STATUSID)
                    .HasConstraintName("FK_TEMPLOYEECHANGE_MSTATUS");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TEMPLOYEECHANGEUNITCODENavigation)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMPLOYEECHANGE_MUNIT");
            });

            modelBuilder.Entity<TEMPLOYEEREGISTRATION>(entity =>
            {
                entity.HasKey(e => e.REGISTRATIONID)
                    .HasName("PK__TEMPLOYE__A68640F849F78E0C");

                entity.Property(e => e.REGISTRATIONID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BANKACCNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BANKACCNO)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BANKID)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BASICWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BIRTHDAY).HasColumnType("datetime");

                entity.Property(e => e.BPJSBASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BPJSKESEHATANBASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BPJSKESEHATANET)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BPJSKESEHATANNO)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BPJSKETENAGAKERJAANNO)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BPJSKETENAGAKERJAANNPP)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EDUCATION)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EMPSEX)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EMPTYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.JOINTDATE).HasColumnType("datetime");

                entity.Property(e => e.KTPADDRESS)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KTPID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NPWP)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PLACEOFBIRTH)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.POSITIONID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RACE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RELIGION)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.STATUSID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOSPK)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TEMPLOYEEREGISTRATION)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMPLOYEEREGISTRATION_MDIVISI");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.TEMPLOYEEREGISTRATION)
                    .HasForeignKey(d => d.EMPID)
                    .HasConstraintName("FK_TEMPLOYEEREGISTRATION_MEMPLOYEE");

                entity.HasOne(d => d.EMPTYPENavigation)
                    .WithMany(p => p.TEMPLOYEEREGISTRATION)
                    .HasForeignKey(d => d.EMPTYPE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMPLOYEEREGISTRATION_MEMPLOYEETYPE");

                entity.HasOne(d => d.POSITION)
                    .WithMany(p => p.TEMPLOYEEREGISTRATION)
                    .HasForeignKey(d => d.POSITIONID)
                    .HasConstraintName("FK_TEMPLOYEEREGISTRATION_MPOSITION");

                entity.HasOne(d => d.STATUS)
                    .WithMany(p => p.TEMPLOYEEREGISTRATION)
                    .HasForeignKey(d => d.STATUSID)
                    .HasConstraintName("FK_TEMPLOYEEREGISTRATION_MSTATUS");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TEMPLOYEEREGISTRATION)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMPLOYEEREGISTRATION_MUNIT");
            });

            modelBuilder.Entity<TEMPLOYEEREGISTRATIONFAMILY>(entity =>
            {
                entity.HasKey(e => new { e.REGISTRATIONID, e.KTPID });

                entity.Property(e => e.REGISTRATIONID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.KTPID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BIRTHDAY).HasColumnType("datetime");

                entity.Property(e => e.EDUCATION)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FULLNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GENDER)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.PLACEOFBIRTH)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RELATIONSHIP)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);



                entity.HasOne(d => d.REGISTRATION)
                    .WithMany(p => p.TEMPLOYEEREGISTRATIONFAMILY)
                    .HasForeignKey(d => d.REGISTRATIONID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMPLOYEEREGISTRATIONFAMILY_TEMPLOYEEREGISTRATION");
            });

            modelBuilder.Entity<TEMPLOYEEREGISTRATIONFILE>(entity =>
            {
                entity.HasKey(e => new { e.REGISTRATIONID, e.FILEID });

                entity.Property(e => e.REGISTRATIONID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DESCRIPTION)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FILENAME)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FILETYPE)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.REGISTRATION)
                    .WithMany(p => p.TEMPLOYEEREGISTRATIONFILE)
                    .HasForeignKey(d => d.REGISTRATIONID)
                    .HasConstraintName("FK_TEMPLOYEEREGISTRATIONFILE_TEMPLOYEEREGISTRATION");
            });

            modelBuilder.Entity<TEQUIPTIMESHEET>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EQUIPID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TEQUIPTIMESHEETDIV)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEET_MORGANIZATION1");

                entity.HasOne(d => d.EQUIP)
                    .WithMany(p => p.TEQUIPTIMESHEET)
                    .HasForeignKey(d => d.EQUIPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEET_MVEHICLE");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TEQUIPTIMESHEETUNIT)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEET_MORGANIZATION");
            });

            modelBuilder.Entity<TEQUIPTIMESHEETACTIVITY>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTID)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKFROMID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKTOID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EQUIPTIMESHEETID)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.HELPERID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.KMEND).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.KMSTART).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OPRID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RECID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TIMEEND).HasColumnType("datetime");

                entity.Property(e => e.TIMESTART).HasColumnType("datetime");

                entity.Property(e => e.VOL).HasColumnType("decimal(9, 2)");

                entity.HasOne(d => d.ACT)
                    .WithMany(p => p.TEQUIPTIMESHEETACTIVITY)
                    .HasForeignKey(d => d.ACTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEETACTIVITY_MACTIVITY");

                entity.HasOne(d => d.BLOCKFROM)
                    .WithMany(p => p.TEQUIPTIMESHEETACTIVITYBLOCKFROM)
                    .HasForeignKey(d => d.BLOCKFROMID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEETACTIVITY_MORGANIZATION1");

                entity.HasOne(d => d.BLOCKTO)
                    .WithMany(p => p.TEQUIPTIMESHEETACTIVITYBLOCKTO)
                    .HasForeignKey(d => d.BLOCKTOID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEETACTIVITY_MORGANIZATION");

                entity.HasOne(d => d.EQUIPTIMESHEET)
                    .WithMany(p => p.TEQUIPTIMESHEETACTIVITY)
                    .HasForeignKey(d => d.EQUIPTIMESHEETID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEETACTIVITY_TEQUIPTIMESHEET");

                entity.HasOne(d => d.HELPER)
                    .WithMany(p => p.TEQUIPTIMESHEETACTIVITYHELPER)
                    .HasForeignKey(d => d.HELPERID)
                    .HasConstraintName("FK_TEQUIPTIMESHEETACTIVITY_MEMPLOYEE1");

                entity.HasOne(d => d.OPR)
                    .WithMany(p => p.TEQUIPTIMESHEETACTIVITYOPR)
                    .HasForeignKey(d => d.OPRID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEETACTIVITY_MEMPLOYEE");

                entity.HasOne(d => d.REC)
                    .WithMany(p => p.TEQUIPTIMESHEETACTIVITYREC)
                    .HasForeignKey(d => d.RECID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEETACTIVITY_MORGANIZATION2");
            });

            modelBuilder.Entity<TEQUIPTIMESHEETEMPLOYEE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EQUIPTIMESHEETID)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.VALUE).HasColumnType("decimal(9, 2)");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.TEQUIPTIMESHEETEMPLOYEE)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEETEMPLOYEE_MEMPLOYEE");

                entity.HasOne(d => d.EQUIPTIMESHEET)
                    .WithMany(p => p.TEQUIPTIMESHEETEMPLOYEE)
                    .HasForeignKey(d => d.EQUIPTIMESHEETID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEETEMPLOYEE_TEQUIPTIMESHEET");
            });

            modelBuilder.Entity<TEQUIPTIMESHEETMATERIAL>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.EQUIPTIMESHEETID)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MATID)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(9, 2)");

                entity.HasOne(d => d.EQUIPTIMESHEET)
                    .WithMany(p => p.TEQUIPTIMESHEETMATERIAL)
                    .HasForeignKey(d => d.EQUIPTIMESHEETID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEETMATERIAL_TEQUIPTIMESHEET");

                entity.HasOne(d => d.MAT)
                    .WithMany(p => p.TEQUIPTIMESHEETMATERIAL)
                    .HasForeignKey(d => d.MATID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEQUIPTIMESHEETMATERIAL_MMATERIAL");
            });

            modelBuilder.Entity<TGERDANRESULT>(entity =>
            {
                entity.HasKey(e => new { e.UNITCODE, e.DIVID, e.HARVESTCODE, e.BLOCKID, e.EMPLOYEEID });

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HARVESTCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACTIVITYID)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.BASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASISGROUP)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEETYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EXCEED1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GEMPID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HARVESTDATE).HasColumnType("datetime");

                entity.Property(e => e.HASILPANEN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWORIBASISPCT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ORIBASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PAYMENTNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PCTBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYJJG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYKG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TOTALPCTBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<TGI>(entity =>
            {
                entity.HasKey(e => e.NO);

                entity.Property(e => e.NO)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.LOCCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.REF)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REVCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.VOUCHERNO)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.HasOne(d => d.LOCCODENavigation)
                    .WithMany(p => p.TGI)
                    .HasForeignKey(d => d.LOCCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGI_MSTORELOCATION");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TGI)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGI_MUNIT");
            });

            modelBuilder.Entity<TGIITEM>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.HasIndex(e => new { e.NO, e.SEQ })
                    .HasName("IX_TGIITEM")
                    .IsUnique();

                entity.Property(e => e.CODE)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACCOUNTCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MATERIALID)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NO)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PRICE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STOCK).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.ACCOUNTCODENavigation)
                    .WithMany(p => p.TGIITEM)
                    .HasForeignKey(d => d.ACCOUNTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGIITEM_MACCOUNT");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TGIITEM)
                    .HasForeignKey(d => d.BLOCKID)
                    .HasConstraintName("FK_TGIITEM_MBLOCK");

                entity.HasOne(d => d.MATERIAL)
                    .WithMany(p => p.TGIITEM)
                    .HasForeignKey(d => d.MATERIALID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGIITEM_MMATERIAL");

                entity.HasOne(d => d.NONavigation)
                    .WithMany(p => p.TGIITEM)
                    .HasForeignKey(d => d.NO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGIITEM_TGI");
            });

            modelBuilder.Entity<TGM>(entity =>
            {
                entity.HasKey(e => e.NO);

                entity.Property(e => e.NO)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.DESTCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SRCCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.DESTCODENavigation)
                    .WithMany(p => p.TGMDESTCODENavigation)
                    .HasForeignKey(d => d.DESTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGM_MSTORELOCATION1");

                entity.HasOne(d => d.SRCCODENavigation)
                    .WithMany(p => p.TGMSRCCODENavigation)
                    .HasForeignKey(d => d.SRCCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGM_MSTORELOCATION");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TGM)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGM_MDOCSTATUS");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TGM)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGM_MUNIT");
            });

            modelBuilder.Entity<TGMITEM>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.HasIndex(e => new { e.NO, e.SEQ })
                    .HasName("IX_TGMITEM")
                    .IsUnique();

                entity.Property(e => e.CODE)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.MATERIALID)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NO)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PRICE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STOCK).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.MATERIAL)
                    .WithMany(p => p.TGMITEM)
                    .HasForeignKey(d => d.MATERIALID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGMITEM_MMATERIAL");
            });

            modelBuilder.Entity<TGR>(entity =>
            {
                entity.HasKey(e => e.NO);

                entity.Property(e => e.NO)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.EXPCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EXPVALUE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LOCCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.REF)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REVCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.VENDORCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VOUCHERNO)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.HasOne(d => d.EXPCODENavigation)
                    .WithMany(p => p.TGREXPCODENavigation)
                    .HasForeignKey(d => d.EXPCODE)
                    .HasConstraintName("FK_TGR_MCARD1");

                entity.HasOne(d => d.LOCCODENavigation)
                    .WithMany(p => p.TGR)
                    .HasForeignKey(d => d.LOCCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGR_MSTORELOCATION");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TGR)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGR_MDOCSTATUS");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TGR)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGR_MUNIT");

                entity.HasOne(d => d.VENDORCODENavigation)
                    .WithMany(p => p.TGRVENDORCODENavigation)
                    .HasForeignKey(d => d.VENDORCODE)
                    .HasConstraintName("FK_TGR_MCARD");
            });

            modelBuilder.Entity<TGRITEM>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.HasIndex(e => new { e.NO, e.SEQ })
                    .HasName("IX_TGRITEM")
                    .IsUnique();

                entity.Property(e => e.CODE)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.EXPVALUE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MATERIALID)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NO)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.POCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.PRICE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.MATERIAL)
                    .WithMany(p => p.TGRITEM)
                    .HasForeignKey(d => d.MATERIALID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGRITEM_MMATERIAL");

                entity.HasOne(d => d.NONavigation)
                    .WithMany(p => p.TGRITEM)
                    .HasForeignKey(d => d.NO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TGRITEM_TGR");
            });

            modelBuilder.Entity<THARVEST>(entity =>
            {
                entity.HasKey(e => e.HARVESTCODE);

                entity.Property(e => e.HARVESTCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTIVITYID)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.CANCELEDCOMMENT)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CHECKERID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DOCID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HARVESTDATE).HasColumnType("datetime");

                entity.Property(e => e.HARVESTPAYMENTTYPE).HasDefaultValueSql("((0))");

                entity.Property(e => e.KRANIID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MANDOR1ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MANDORID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REMARK)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPLOADED).HasColumnType("datetime");

                entity.HasOne(d => d.CHECKER)
                    .WithMany(p => p.THARVESTCHECKER)
                    .HasForeignKey(d => d.CHECKERID)
                    .HasConstraintName("FK_THARVEST_MEMPLOYEE3");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.THARVEST)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVEST_MDIVISI");

                entity.HasOne(d => d.HARVESTTYPENavigation)
                    .WithMany(p => p.THARVEST)
                    .HasForeignKey(d => d.HARVESTTYPE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVEST_MHARVESTTYPE");

                entity.HasOne(d => d.KRANI)
                    .WithMany(p => p.THARVESTKRANI)
                    .HasForeignKey(d => d.KRANIID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVEST_MEMPLOYEE1");

                entity.HasOne(d => d.MANDOR1)
                    .WithMany(p => p.THARVESTMANDOR1)
                    .HasForeignKey(d => d.MANDOR1ID)
                    .HasConstraintName("FK_THARVEST_MEMPLOYEE2");

                entity.HasOne(d => d.MANDOR)
                    .WithMany(p => p.THARVESTMANDOR)
                    .HasForeignKey(d => d.MANDORID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVEST_MEMPLOYEE");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.THARVEST)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVEST_MDOCSTATUS");
            });

            modelBuilder.Entity<THARVESTASIS>(entity =>
            {
                entity.HasKey(e => new { e.HARVESTCODE, e.UNITID })
                    .HasName("PK_THARVESTASIS_1");

                entity.Property(e => e.HARVESTCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.HARVESTCODENavigation)
                    .WithMany(p => p.THARVESTASIS)
                    .HasForeignKey(d => d.HARVESTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTASIS_THARVEST");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.THARVESTASIS)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTASIS_MORGANIZATION");
            });

            modelBuilder.Entity<THARVESTBASE>(entity =>
            {
                entity.HasKey(e => new { e.HARVESTCODE, e.BLOCKID, e.EMPID });

                entity.Property(e => e.HARVESTCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BASE1).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.THARVESTBASE)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTBASE_MORGANIZATION");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.THARVESTBASE)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTBASE_MEMPLOYEE");

                entity.HasOne(d => d.HARVESTCODENavigation)
                    .WithMany(p => p.THARVESTBASE)
                    .HasForeignKey(d => d.HARVESTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTBASE_THARVEST");
            });

            modelBuilder.Entity<THARVESTBLOCK>(entity =>
            {
                entity.HasKey(e => new { e.HARVESTCODE, e.BLOCKID, e.EMPLOYEEID });

                entity.Property(e => e.HARVESTCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPAREA).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GERDANID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GVALUE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HARVESTAREA).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYKG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.THARVESTBLOCK)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTBLOCK_MBLOCK");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.THARVESTBLOCK)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTBLOCK_MEMPLOYEE");

                entity.HasOne(d => d.HARVESTCODENavigation)
                    .WithMany(p => p.THARVESTBLOCK)
                    .HasForeignKey(d => d.HARVESTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTBLOCK_THARVEST");
            });

            modelBuilder.Entity<THARVESTBLOCKQLY>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(17))");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NOSPB)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.VALUE).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<THARVESTBLOCKRESULT>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.NOSPB, e.BLOCKID });

                entity.Property(e => e.ID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NOSPB)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BJR).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BRD).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.DRIVER)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('-')");

                entity.Property(e => e.JJG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NETTO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PAG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.SOURCE)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.VEHID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('-')");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.THARVESTBLOCKRESULT)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTBLOCKRESULT_MORGANIZATION");

                entity.HasOne(d => d.BLOCKDETAIL)
                .WithMany(p => p.THARVESTBLOCKRESULT)
                .HasForeignKey(d => d.BLOCKID);

            });

            modelBuilder.Entity<THARVESTCOLLECT>(entity =>
            {
                entity.HasKey(e => new { e.HARVESTCODE, e.EMPLOYEEID, e.BLOCKID, e.COLLPOINT });

                entity.Property(e => e.HARVESTCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.COLLPOINT)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYKG).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.THARVESTCOLLECT)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTCOLLECT_MBLOCK");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.THARVESTCOLLECT)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTCOLLECT_MEMPLOYEE");

                entity.HasOne(d => d.HARVESTCODENavigation)
                    .WithMany(p => p.THARVESTCOLLECT)
                    .HasForeignKey(d => d.HARVESTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTCOLLECT_THARVEST");
            });

            modelBuilder.Entity<THARVESTEMPLOYEE>(entity =>
            {
                entity.HasKey(e => new { e.HARVESTCODE, e.EMPLOYEEID })
                    .HasName("PK_THARVESTEMPLOYEE_1");

                entity.Property(e => e.HARVESTCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GEMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GVALUE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GVALUECALC).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUECALC).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.THARVESTEMPLOYEEEMPLOYEE)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTEMPLOYEE_MEMPLOYEE");

                entity.HasOne(d => d.GEMP)
                    .WithMany(p => p.THARVESTEMPLOYEEGEMP)
                    .HasForeignKey(d => d.GEMPID)
                    .HasConstraintName("FK_THARVESTEMPLOYEE_MEMPLOYEE1");

                entity.HasOne(d => d.HARVESTCODENavigation)
                    .WithMany(p => p.THARVESTEMPLOYEE)
                    .HasForeignKey(d => d.HARVESTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTEMPLOYEE_THARVEST");
            });

            modelBuilder.Entity<THARVESTFINE>(entity =>
            {
                entity.HasKey(e => new { e.HARVESTCODE, e.EMPLOYEEID, e.BLOCKID, e.FINECODE });

                entity.Property(e => e.HARVESTCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FINECODE)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.THARVESTFINE)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTFINE_MBLOCK");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.THARVESTFINE)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTFINE_MEMPLOYEE");

                entity.HasOne(d => d.FINECODENavigation)
                    .WithMany(p => p.THARVESTFINE)
                    .HasForeignKey(d => d.FINECODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTFINE_MPENALTYTYPE");

                entity.HasOne(d => d.HARVESTCODENavigation)
                    .WithMany(p => p.THARVESTFINE)
                    .HasForeignKey(d => d.HARVESTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTFINE_THARVEST");
            });

            modelBuilder.Entity<THARVESTPLAN>(entity =>
            {
                entity.HasKey(e => e.HARVESTPLANCODE);

                entity.Property(e => e.HARVESTPLANCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTIVITYID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CANCELEDCOMMENT)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CHECKERID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DOCID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HARVESTPLANDATE).HasColumnType("datetime");

                entity.Property(e => e.KRANIID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MANDOR1ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MANDORID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REMARK)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.CHECKER)
                    .WithMany(p => p.THARVESTPLANCHECKER)
                    .HasForeignKey(d => d.CHECKERID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLAN_MEMPLOYEE3");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.THARVESTPLAN)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLAN_MDIVISI");

                entity.HasOne(d => d.HARVESTPLANTYPENavigation)
                    .WithMany(p => p.THARVESTPLAN)
                    .HasForeignKey(d => d.HARVESTPLANTYPE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLAN_MHARVESTTYPE");

                entity.HasOne(d => d.KRANI)
                    .WithMany(p => p.THARVESTPLANKRANI)
                    .HasForeignKey(d => d.KRANIID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLAN_MEMPLOYEE1");

                entity.HasOne(d => d.MANDOR1)
                    .WithMany(p => p.THARVESTPLANMANDOR1)
                    .HasForeignKey(d => d.MANDOR1ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLAN_MEMPLOYEE2");

                entity.HasOne(d => d.MANDOR)
                    .WithMany(p => p.THARVESTPLANMANDOR)
                    .HasForeignKey(d => d.MANDORID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLAN_MEMPLOYEE");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.THARVESTPLAN)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLAN_MDOCSTATUS");
            });

            modelBuilder.Entity<THARVESTPLANBLOCK>(entity =>
            {
                entity.HasKey(e => new { e.HARVESTPLANCODE, e.BLOCKID })
                    .HasName("PK_THARVESTPLANBLOCK_1");

                entity.Property(e => e.HARVESTPLANCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.THARVESTPLANBLOCK)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLANBLOCK_MBLOCK");

                entity.HasOne(d => d.HARVESTPLANCODENavigation)
                    .WithMany(p => p.THARVESTPLANBLOCK)
                    .HasForeignKey(d => d.HARVESTPLANCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLANBLOCK_THARVESTPLAN");
            });

            modelBuilder.Entity<THARVESTPLANEMPLOYEE>(entity =>
            {
                entity.HasKey(e => new { e.HARVESTPLANCODE, e.EMPLOYEEID })
                    .HasName("PK_THARVESTPLANEMPLOYEE_1");

                entity.Property(e => e.HARVESTPLANCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.THARVESTPLANEMPLOYEE)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLANEMPLOYEE_MEMPLOYEE");

                entity.HasOne(d => d.HARVESTPLANCODENavigation)
                    .WithMany(p => p.THARVESTPLANEMPLOYEE)
                    .HasForeignKey(d => d.HARVESTPLANCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLANEMPLOYEE_THARVESTPLAN");
            });

            modelBuilder.Entity<THARVESTPLANEMPLOYEECALC>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTID)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.RKHID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UPDATEDDATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('20180101')");

                entity.HasOne(d => d.ACT)
                    .WithMany(p => p.THARVESTPLANEMPLOYEECALC)
                    .HasForeignKey(d => d.ACTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLANEMPLOYEECALC_MACTIVITY");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.THARVESTPLANEMPLOYEECALC)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTPLANEMPLOYEECALC_MEMPLOYEE");
            });

            modelBuilder.Entity<THARVESTRESULT>(entity =>
            {
                entity.HasKey(e => new { e.EMPLOYEEID, e.HARVESTDATE, e.BLOCKID, e.MANDORID, e.MANDOR1ID, e.KRANIID, e.CHECKERID, e.HARVESTTYPE, e.HARVESTPAYMENTTYPE, e.ACTIVITYID, e.PAYMENTNO });

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HARVESTDATE).HasColumnType("datetime");

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MANDORID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MANDOR1ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.KRANIID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CHECKERID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACTIVITYID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.PAYMENTNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ATTINCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ATTPREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASISGROUP)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CHECKERINCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEENAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEETYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ENDDATE).HasColumnType("datetime");

                entity.Property(e => e.EXCEED1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FAMILYSTATUS)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FINEAMOUNT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FINEQTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GEMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GERDANBASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GOLONGAN)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HABASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HAHASIL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HAINCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HAPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HAPREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HASILPANEN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.INCENTIVEPKKTGI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KRANIINCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDOR1INCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORINCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWATTPREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHABASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHAPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHAPREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWORIBASISPCT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ORIBASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.POSITIONID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.PREMI1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIPKKTGI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYJJG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYKG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STARTDATE).HasColumnType("datetime");

                entity.Property(e => e.STATUSID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SUPERVISORID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TAXSTATUS)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TOTALPANEN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ACTIVITY)
                    .WithMany(p => p.THARVESTRESULT)
                    .HasForeignKey(d => d.ACTIVITYID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTRESULT_MACTIVITY");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.THARVESTRESULT)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTRESULT_MBLOCK");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.THARVESTRESULT)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTRESULT_MDIVISI");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.THARVESTRESULTEMPLOYEE)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTRESULT_MEMPLOYEE");

                entity.HasOne(d => d.KRANI)
                    .WithMany(p => p.THARVESTRESULTKRANI)
                    .HasForeignKey(d => d.KRANIID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTRESULT_MEMPLOYEE3");

                entity.HasOne(d => d.MANDOR1)
                    .WithMany(p => p.THARVESTRESULTMANDOR1)
                    .HasForeignKey(d => d.MANDOR1ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTRESULT_MEMPLOYEE2");

                entity.HasOne(d => d.MANDOR)
                    .WithMany(p => p.THARVESTRESULTMANDOR)
                    .HasForeignKey(d => d.MANDORID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTRESULT_MEMPLOYEE1");

                entity.HasOne(d => d.PAYMENTNONavigation)
                    .WithMany(p => p.THARVESTRESULT)
                    .HasForeignKey(d => d.PAYMENTNO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTRESULT_TPAYMENT");

                entity.HasOne(d => d.POSITION)
                    .WithMany(p => p.THARVESTRESULT)
                    .HasForeignKey(d => d.POSITIONID)
                    .HasConstraintName("FK_THARVESTRESULT_MPOSITION");

                entity.HasOne(d => d.STATUS)
                    .WithMany(p => p.THARVESTRESULT)
                    .HasForeignKey(d => d.STATUSID)
                    .HasConstraintName("FK_THARVESTRESULT_MSTATUS");

                entity.HasOne(d => d.SUPERVISOR)
                    .WithMany(p => p.THARVESTRESULTSUPERVISOR)
                    .HasForeignKey(d => d.SUPERVISORID)
                    .HasConstraintName("FK_THARVESTRESULT_MEMPLOYEE4");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.THARVESTRESULT)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTRESULT_MUNIT");
            });

            modelBuilder.Entity<THARVESTRESULT1>(entity =>
            {
                entity.HasKey(e => new { e.UNITCODE, e.DIVID, e.HARVESTCODE, e.BLOCKID, e.EMPLOYEEID });

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HARVESTCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACTIVITYID)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ATTINCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ATTPREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASISGROUP)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CHECKERID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEETYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EXCEED1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FINEAMOUNT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FINEQTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GEMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GERDANBASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HABASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HAHASIL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HAINCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HAPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HAPREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HARVESTDATE).HasColumnType("datetime");

                entity.Property(e => e.HASILPANEN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.INCENTIVEPKKTGI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KRANIID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MANDOR1ID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MANDORID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NEWATTPREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHABASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHAPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHAPREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWORIBASISPCT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ORIBASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PAYMENTNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PCTBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIPKKTGI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYJJG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYKG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TOTALPANEN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<THARVESTROT>(entity =>
            {
                entity.HasKey(e => new { e.UNITID, e.ROT });

                entity.Property(e => e.UNITID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.THARVESTROT)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTROT_MORGANIZATION");
            });

            modelBuilder.Entity<TINCMANDORPERIOD>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AMOUNT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ENDDATE).HasColumnType("datetime");

                entity.Property(e => e.MAXJANGKOS).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.MAXMENTAH).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.MINMATANG).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.MINPROD).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.STARTDATE).HasColumnType("datetime");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<TINCMANDORPERIODPOS>(entity =>
            {
                entity.HasKey(e => new { e.PERIODID, e.POSITIONID });

                entity.Property(e => e.PERIODID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.POSITIONID)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TJOURNAL>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CHEQUE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PAYEE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.REF)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TJOURNAL)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TJOURNAL_MDOCSTATUS");

                entity.HasOne(d => d.TYPENavigation)
                    .WithMany(p => p.TJOURNAL)
                    .HasForeignKey(d => d.TYPE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TJOURNAL_MJOURNALTYPE");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TJOURNAL)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TJOURNAL_MUNIT");
            });

            modelBuilder.Entity<TJOURNALITEM>(entity =>
            {
                entity.HasKey(e => new { e.CODE, e.SEQ });

                entity.Property(e => e.CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACCOUNTCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AMOUNT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.ACCOUNTCODENavigation)
                    .WithMany(p => p.TJOURNALITEM)
                    .HasForeignKey(d => d.ACCOUNTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TJOURNALITEM_MACCOUNT");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TJOURNALITEM)
                    .HasForeignKey(d => d.BLOCKID)
                    .HasConstraintName("FK_TJOURNALITEM_MORGANIZATION");

                entity.HasOne(d => d.CODENavigation)
                    .WithMany(p => p.TJOURNALITEM)
                    .HasForeignKey(d => d.CODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TJOURNALITEM_TJOURNAL");
            });

            modelBuilder.Entity<TKARTUTIMBANG>(entity =>
            {
                entity.HasKey(e => new { e.SPBNO, e.SRNO });

                entity.Property(e => e.SPBNO)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ATTEMPNO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CHECKDATE).HasColumnType("datetime");

                entity.Property(e => e.UOM)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WEIGHT).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.SPBNONavigation)
                    .WithMany(p => p.TKARTUTIMBANG)
                    .HasForeignKey(d => d.SPBNO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TKARTUTIMBANG_TSPB");
            });

            modelBuilder.Entity<TLOADING>(entity =>
            {
                entity.HasKey(e => e.LOADINGCODE);

                entity.Property(e => e.LOADINGCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTIVITYDRIVERID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ACTIVITYID)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.CANCELEDCOMMENT)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DESTINATIONID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DOCID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DRIVERID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.KRANIID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LOADINGDATE).HasColumnType("datetime");

                entity.Property(e => e.NOSPB)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REMARK)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPLOADED).HasColumnType("datetime");

                entity.Property(e => e.VEHICLEID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VEHICLETYPEID)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TLOADING)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADING_MDIVISI");

                entity.HasOne(d => d.KRANI)
                    .WithMany(p => p.TLOADING)
                    .HasForeignKey(d => d.KRANIID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADING_MEMPLOYEE1");

                entity.HasOne(d => d.LOADINGTYPENavigation)
                    .WithMany(p => p.TLOADING)
                    .HasForeignKey(d => d.LOADINGTYPE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADING_MLOADINGTYPE");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TLOADING)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADING_MDOCSTATUS");
            });

            modelBuilder.Entity<TLOADINGASIS>(entity =>
            {
                entity.HasKey(e => new { e.LOADINGCODE, e.UNITID })
                    .HasName("PK_TLOADINGASIS_1");

                entity.Property(e => e.LOADINGCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.LOADINGCODENavigation)
                    .WithMany(p => p.TLOADINGASIS)
                    .HasForeignKey(d => d.LOADINGCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGASIS_TLOADING");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TLOADINGASIS)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGASIS_MORGANIZATION");
            });

            modelBuilder.Entity<TLOADINGBASE>(entity =>
            {
                entity.HasKey(e => new { e.LOADINGCODE, e.BLOCKID, e.EMPID });

                entity.Property(e => e.LOADINGCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BASE1).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TLOADINGBASE)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGBASE_MORGANIZATION");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.TLOADINGBASE)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGBASE_MEMPLOYEE");

                entity.HasOne(d => d.LOADINGCODENavigation)
                    .WithMany(p => p.TLOADINGBASE)
                    .HasForeignKey(d => d.LOADINGCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGBASE_TLOADING");
            });

            modelBuilder.Entity<TLOADINGBLOCK>(entity =>
            {
                entity.HasKey(e => new { e.LOADINGCODE, e.BLOCKID, e.EMPLOYEEID });

                entity.Property(e => e.LOADINGCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.KG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYKG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TLOADINGBLOCK)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGBLOCK_MBLOCK");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.TLOADINGBLOCK)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGBLOCK_MEMPLOYEE");

                entity.HasOne(d => d.LOADINGCODENavigation)
                    .WithMany(p => p.TLOADINGBLOCK)
                    .HasForeignKey(d => d.LOADINGCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGBLOCK_TLOADING");
            });

            modelBuilder.Entity<TLOADINGBLOCKRESULT>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BLOCKID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.PAG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.SOURCE)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TLOADINGBLOCKRESULT)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGBLOCKRESULT_MORGANIZATION");
            });

            modelBuilder.Entity<TLOADINGCOLLECT>(entity =>
            {
                entity.HasKey(e => new { e.LOADINGCODE, e.EMPLOYEEID, e.BLOCKID, e.COLLPOINT });

                entity.Property(e => e.LOADINGCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.COLLPOINT)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYKG).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TLOADINGCOLLECT)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGCOLLECT_MBLOCK");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.TLOADINGCOLLECT)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGCOLLECT_MEMPLOYEE");

                entity.HasOne(d => d.LOADINGCODENavigation)
                    .WithMany(p => p.TLOADINGCOLLECT)
                    .HasForeignKey(d => d.LOADINGCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGCOLLECT_TLOADING");
            });

            modelBuilder.Entity<TLOADINGDRIVER>(entity =>
            {
                entity.HasKey(e => new { e.LOADINGCODE, e.DRIVERID });

                entity.Property(e => e.LOADINGCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DRIVERID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VALUE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUECALC).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.DRIVER)
                    .WithMany(p => p.TLOADINGDRIVER)
                    .HasForeignKey(d => d.DRIVERID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGDRIVER_MEMPLOYEE");

                entity.HasOne(d => d.LOADINGCODENavigation)
                    .WithMany(p => p.TLOADINGDRIVER)
                    .HasForeignKey(d => d.LOADINGCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGDRIVER_TLOADING");
            });

            modelBuilder.Entity<TLOADINGEMPLOYEE>(entity =>
            {
                entity.HasKey(e => new { e.LOADINGCODE, e.EMPLOYEEID })
                    .HasName("PK_TLOADINGEMPLOYEE_1");

                entity.Property(e => e.LOADINGCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VALUE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUECALC).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.TLOADINGEMPLOYEE)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGEMPLOYEE_MEMPLOYEE");

                entity.HasOne(d => d.LOADINGCODENavigation)
                    .WithMany(p => p.TLOADINGEMPLOYEE)
                    .HasForeignKey(d => d.LOADINGCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGEMPLOYEE_TLOADING");
            });

            modelBuilder.Entity<TLOADINGRESULT>(entity =>
            {
                entity.HasKey(e => new { e.UNITCODE, e.DIVID, e.LOADINGCODE, e.BLOCKID, e.EMPLOYEEID })
                    .HasName("PK_TLOADINGRESULT1");

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LOADINGCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACTIVITYID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.BASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASISGROUP)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEETYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EXCEED1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HASILPANEN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KRANIID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LOADINGDATE).HasColumnType("datetime");

                entity.Property(e => e.NEWBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWORIBASISPCT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NOSPB)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ORIBASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PAYMENTNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PCTBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYJJG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYKG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TOTALPANEN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.VEHICLEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VEHICLETYPEID)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLOADINGROT>(entity =>
            {
                entity.HasKey(e => new { e.UNITID, e.ROT });

                entity.Property(e => e.UNITID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TLOADINGROT)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLOADINGROT_MORGANIZATION");
            });

            modelBuilder.Entity<TMANDORFINE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<TMILLGRADING>(entity =>
            {
                entity.HasKey(e => e.ID);

                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
                
                entity.Property(e => e.GRADINGDATE).HasColumnType("datetime");
                entity.Property(e => e.QTYPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TMILLGRADING)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMILLGRADING_MUNIT");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TMILLGRADING)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMILLGRADING_MDIVISI");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TMILLGRADING)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TMILLGRADING_MDOCSTATUS");
            });

            modelBuilder.Entity<TOPERATINGRESULT>(entity =>
            {
                entity.HasKey(e => new { e.UNITCODE, e.DIVID, e.LOADINGCODE, e.DRIVERID, e.BLOCKID })
                    .HasName("PK_TOPERATINGRESULT_1");

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LOADINGCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DRIVERID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACTIVITYID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.BASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASE6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASISGROUP)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DESTINATIONID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEETYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EXCEED1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EXCEED6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRIDAY1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HASILPANEN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LOADINGDATE).HasColumnType("datetime");

                entity.Property(e => e.NEWBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASIS6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWBASISPCT6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWHASIL6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWINCENTIVE6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWORIBASISPCT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMILEBIH6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NEWPREMISIAP6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NOSPB)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ORIBASE1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PAYMENTNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PCTBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTBASIS6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PCTORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYJJG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTYKG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TOTALPANEN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTBASIS6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALPCTORIBASIS1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.VEHICLEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VEHICLETYPEID)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TOVERTIME>(entity =>
            {
                entity.HasKey(e => e.DOCNO);

                entity.Property(e => e.DOCNO)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREDIT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DEBIT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DOCDATE).HasColumnType("datetime");

                entity.Property(e => e.EMPLOYEEID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EQUIPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LOCID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OT150).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OT200).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OT300).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OT400).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OTHERWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.POSBENEFIT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.REMARK)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.ACT)
                    .WithMany(p => p.TOVERTIME)
                    .HasForeignKey(d => d.ACTID)
                    .HasConstraintName("FK_TOVERTIME_MACTIVITY");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TOVERTIME)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TOVERTIME_MDIVISI");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.TOVERTIME)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TOVERTIME_MEMPLOYEE");

                entity.HasOne(d => d.LOC)
                    .WithMany(p => p.TOVERTIME)
                    .HasForeignKey(d => d.LOCID)
                    .HasConstraintName("FK_TOVERTIME_MORGANIZATION");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TOVERTIME)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TOVERTIME_MDOCSTATUS");
            });

            modelBuilder.Entity<TPAYMENT>(entity =>
            {
                entity.HasKey(e => e.DOCNO);

                entity.HasIndex(e => new { e.DOCNO, e.UNITCODE })
                    .HasName("IX_TPAYMENT")
                    .IsUnique();

                entity.Property(e => e.DOCNO)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DOCDATE).HasColumnType("datetime");

                entity.Property(e => e.ENDDATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(2018))");

                entity.Property(e => e.KTU)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MANAGER)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.STARTDATE)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(2018))");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TOTAL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TPAYMENT)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENT_MDOCSTATUS");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TPAYMENT)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENT_MUNIT");
            });

            modelBuilder.Entity<TPAYMENTATTR>(entity =>
            {
                entity.HasKey(e => new { e.DOCNO, e.TYPEID });

                entity.Property(e => e.DOCNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TYPEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NVALUE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TVALUE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.DOCNONavigation)
                    .WithMany(p => p.TPAYMENTATTR)
                    .HasForeignKey(d => d.DOCNO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENTATTR_TPAYMENT");
            });

            modelBuilder.Entity<TPAYMENTATTREMP>(entity =>
            {
                entity.HasKey(e => new { e.DOCNO, e.TYPEID, e.EMPID });

                entity.Property(e => e.DOCNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TYPEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NVALUE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TVALUE)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.DOCNONavigation)
                    .WithMany(p => p.TPAYMENTATTREMP)
                    .HasForeignKey(d => d.DOCNO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENTATTREMP_TPAYMENT");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.TPAYMENTATTREMP)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENTATTREMP_MEMPLOYEE");
            });

            modelBuilder.Entity<TPAYMENTDETAIL>(entity =>
            {
                entity.HasKey(e => new { e.DOCNO, e.EMPID });

                entity.HasIndex(e => new { e.DOCNO, e.EMPID })
                    .HasName("IX_TPAYMENTDETAIL")
                    .IsUnique();

                entity.Property(e => e.DOCNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BASICWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASICWAGESBRUTO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.COSTCENTER)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DEBIT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EMPCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EMPTYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FAMILYSTATUS)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GOLONGAN)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HK).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.HKC).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.HKH1).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.HKH2).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.HKP1).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.HKP2).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.HKP3).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.HKP4).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.HKS1).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.HKS2).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.INCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JAMSOSTEKDEDUCTION).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JAMSOSTEKINCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JOINTDATE).HasColumnType("datetime");

                entity.Property(e => e.KOPERASI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANGKIR).HasColumnType("decimal(8, 4)");

                entity.Property(e => e.NATURA).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NATURADEDUCTION).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NATURAINCOME).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NATURAINCOMEEMPLOYEE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OVERTIME).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OVERTIMEHOUR).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PENALTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PERIOD1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.POSITIONID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.PREMIHADIR).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMINONPANEN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIPANEN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIPANENKONTAN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RICEPAIDASMONEY)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SPSI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUSID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SUPERVISORID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TAX).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TAXINCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TAXSTATUS)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TOTALSALARY).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.DOCNONavigation)
                    .WithMany(p => p.TPAYMENTDETAIL)
                    .HasForeignKey(d => d.DOCNO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENTDETAIL_TPAYMENT");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.TPAYMENTDETAILEMP)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENTDETAIL_MEMPLOYEE");

                entity.HasOne(d => d.POSITION)
                    .WithMany(p => p.TPAYMENTDETAIL)
                    .HasForeignKey(d => d.POSITIONID)
                    .HasConstraintName("FK_TPAYMENTDETAIL_MPOSITION");

                entity.HasOne(d => d.STATUS)
                    .WithMany(p => p.TPAYMENTDETAIL)
                    .HasForeignKey(d => d.STATUSID)
                    .HasConstraintName("FK_TPAYMENTDETAIL_MSTATUS");

                entity.HasOne(d => d.SUPERVISOR)
                    .WithMany(p => p.TPAYMENTDETAILSUPERVISOR)
                    .HasForeignKey(d => d.SUPERVISORID)
                    .HasConstraintName("FK_TPAYMENTDETAIL_MEMPLOYEE1");
            });

            modelBuilder.Entity<TPAYMENTDETAILTRX>(entity =>
            {
                entity.HasKey(e => new { e.DOCNO, e.EMPID });

                entity.Property(e => e.DOCNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DOCDATE).HasColumnType("datetime");

                entity.Property(e => e.EMPCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTES)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TYPEMANUAL)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TPAYMENTITEM>(entity =>
            {
                entity.HasKey(e => new { e.DOCNO, e.TYPEID, e.EMPID });

                entity.Property(e => e.DOCNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TYPEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AMOUNT).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.DOCNONavigation)
                    .WithMany(p => p.TPAYMENTITEM)
                    .HasForeignKey(d => d.DOCNO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENTITEM_TPAYMENT");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.TPAYMENTITEM)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENTITEM_MEMPLOYEE");

                entity.HasOne(d => d.TYPE)
                    .WithMany(p => p.TPAYMENTITEM)
                    .HasForeignKey(d => d.TYPEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENTITEM_MSALARYTYPE");
            });

            modelBuilder.Entity<TPAYMENTSCHEME>(entity =>
            {
                entity.HasKey(e => e.PAYMENTNO);

                entity.Property(e => e.PAYMENTNO)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BHLDAILYWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CHECKERPREMIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KRANIBRONDOLBHL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KRANIBRONDOLSKU).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KRANIPENALTYPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KRANIPREMIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KRANIPREMIPCTBHL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDOR1PENALTYPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDOR1PREMIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORBRONDOLPENALTYPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORBRONDOLPREMIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORBRONDOLPREMIPCTBHL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORPENALTYPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORPREMIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORPREMIPCTBHL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PENSIONCOMPANY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PENSIONEMPLOYEE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PENSIONFUND).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIBASEDCALCULATION)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PREMISYSTEM)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PROVINCEWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RATEINBHL).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.RATEINKRN).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.RATEINMDR1).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.RATEINNDR).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.RATEINSKU).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.RICECHILDREN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RICEEMPLOYEE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RICEPAIDASMONEY)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RICEWIFE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.SKUDAILYWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TAXPAIDBYGOVERMENT).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.PAYMENTNONavigation)
                    .WithOne(p => p.TPAYMENTSCHEME)
                    .HasForeignKey<TPAYMENTSCHEME>(d => d.PAYMENTNO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENTSCHEME_TPAYMENT");
            });

            modelBuilder.Entity<TPAYMENTTAX>(entity =>
            {
                entity.HasKey(e => new { e.DOCNO, e.EMPID });

                entity.Property(e => e.DOCNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BASICWAGES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BASICWAGESBRUTO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GROSSINCOME).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.INCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JAMSOSTEKDEDUCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JAMSOSTEKINC).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NATURA).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NETINCOMEMONTH).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NETINCOMEYEAR).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NONTAXABLE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OVERTIME).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.POSITIONCOST).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TAXABLE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TAXINCENTIVE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TAXMONTH).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TAXPAID).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TAXYEAR).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<TPREMICHECKER>(entity =>
            {
                entity.HasKey(e => new { e.UNITID, e.DATE, e.CHECKERID, e.ACTID, e.HARVESTTYPE, e.HARVESTPAYMENTTYPE, e.PAYMENTNO })
                    .HasName("PK_TPREMICHECKER_1");

                entity.Property(e => e.UNITID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.CHECKERID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACTID)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('HV0111')");

                entity.Property(e => e.PAYMENTNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPPREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FINE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.CHECKER)
                    .WithMany(p => p.TPREMICHECKER)
                    .HasForeignKey(d => d.CHECKERID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMICHECKER_MEMPLOYEE");

                entity.HasOne(d => d.PAYMENTNONavigation)
                    .WithMany(p => p.TPREMICHECKER)
                    .HasForeignKey(d => d.PAYMENTNO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMICHECKER_TPAYMENT");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TPREMICHECKER)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMICHECKER_MORGANIZATION");
            });

            modelBuilder.Entity<TPREMIMANDOR>(entity =>
            {
                entity.HasKey(e => new { e.UNITCODE, e.DIVID, e.HARVESTDATE, e.MANDORID, e.MANDOR1ID, e.KRANIID, e.HARVESTTYPE, e.HARVESTPAYMENTTYPE, e.EMPTYPE, e.PAYMENTNO, e.ACTIVITYID });

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HARVESTDATE).HasColumnType("datetime");

                entity.Property(e => e.MANDORID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MANDOR1ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.KRANIID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPTYPE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PAYMENTNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACTIVITYID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.KRANIFINE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MANDORFINE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIEMP).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIKRANI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIKRANIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIMANDOR).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIMANDORPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.ACTIVITY)
                    .WithMany(p => p.TPREMIMANDOR)
                    .HasForeignKey(d => d.ACTIVITYID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMIMANDOR_MACTIVITY");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TPREMIMANDOR)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMIMANDOR_MDIVISI");

                entity.HasOne(d => d.KRANI)
                    .WithMany(p => p.TPREMIMANDORKRANI)
                    .HasForeignKey(d => d.KRANIID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMIMANDOR_MEMPLOYEE2");

                entity.HasOne(d => d.MANDOR1)
                    .WithMany(p => p.TPREMIMANDORMANDOR1)
                    .HasForeignKey(d => d.MANDOR1ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMIMANDOR_MEMPLOYEE1");

                entity.HasOne(d => d.MANDOR)
                    .WithMany(p => p.TPREMIMANDORMANDOR)
                    .HasForeignKey(d => d.MANDORID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMIMANDOR_MEMPLOYEE");

                entity.HasOne(d => d.PAYMENTNONavigation)
                    .WithMany(p => p.TPREMIMANDOR)
                    .HasForeignKey(d => d.PAYMENTNO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMIMANDOR_TPAYMENT");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TPREMIMANDOR)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMIMANDOR_MUNIT");
            });

            modelBuilder.Entity<TPREMIMANDOR1>(entity =>
            {
                entity.HasKey(e => new { e.UNITID, e.DATE, e.MANDORID, e.HARVESTPAYMENTTYPE, e.PAYMENTNO });

                entity.Property(e => e.UNITID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.MANDORID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PAYMENTNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPPREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FINE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIPCT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.MANDOR)
                    .WithMany(p => p.TPREMIMANDOR1)
                    .HasForeignKey(d => d.MANDORID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMIMANDOR1_MEMPLOYEE");

                entity.HasOne(d => d.PAYMENTNONavigation)
                    .WithMany(p => p.TPREMIMANDOR1)
                    .HasForeignKey(d => d.PAYMENTNO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMIMANDOR1_TPAYMENT");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TPREMIMANDOR1)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMIMANDOR1_MORGANIZATION");
            });

            modelBuilder.Entity<TPREMINONPANEN>(entity =>
            {
                entity.HasKey(e => e.DOCNO);

                entity.HasIndex(e => new { e.EMPLOYEEID, e.PREMIDATE })
                    .HasName("IX_TPREMINONPANEN");

                entity.Property(e => e.DOCNO)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTIVITYID)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PAYMENTNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PREMIAMOUNT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PREMIDATE).HasColumnType("datetime");

                entity.Property(e => e.PREMIHK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.REF)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REMARK)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.ACTIVITY)
                    .WithMany(p => p.TPREMINONPANEN)
                    .HasForeignKey(d => d.ACTIVITYID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMINONPANEN_MACTIVITY");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TPREMINONPANEN)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMINONPANEN_MDIVISI");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.TPREMINONPANEN)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPREMINONPANEN_MEMPLOYEE");
            });

            modelBuilder.Entity<TRKH>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTDATE).HasColumnType("datetime");

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TRKH)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKH_MORGANIZATION");
            });

            modelBuilder.Entity<TRKHACTUAL>(entity =>
            {
                entity.HasKey(e => new { e.RKHID, e.ACTID, e.SPVID });

                entity.Property(e => e.RKHID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ACTID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.SPVID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.ACT)
                    .WithMany(p => p.TRKHACTUAL)
                    .HasForeignKey(d => d.ACTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHACTUAL_MACTIVITY");

                entity.HasOne(d => d.RKH)
                    .WithMany(p => p.TRKHACTUAL)
                    .HasForeignKey(d => d.RKHID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHACTUAL_TRKH");

                entity.HasOne(d => d.SPV)
                    .WithMany(p => p.TRKHACTUAL)
                    .HasForeignKey(d => d.SPVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHACTUAL_MEMPLOYEE");
            });

            modelBuilder.Entity<TRKHDETAIL>(entity =>
            {
                entity.HasKey(e => new { e.RKHID, e.ACTID, e.SPVID, e.BLOCKID });

                entity.Property(e => e.RKHID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ACTID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.SPVID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VOL).HasColumnType("decimal(9, 2)");

                entity.HasOne(d => d.ACT)
                    .WithMany(p => p.TRKHDETAIL)
                    .HasForeignKey(d => d.ACTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHDETAIL_MACTIVITY");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TRKHDETAIL)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHDETAIL_MORGANIZATION");

                entity.HasOne(d => d.RKH)
                    .WithMany(p => p.TRKHDETAIL)
                    .HasForeignKey(d => d.RKHID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHDETAIL_TRKH");

                entity.HasOne(d => d.SPV)
                    .WithMany(p => p.TRKHDETAIL)
                    .HasForeignKey(d => d.SPVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHDETAIL_MEMPLOYEE");
            });

            modelBuilder.Entity<TRKHESTPANEN>(entity =>
            {
                entity.HasKey(e => e.RKHID);

                entity.Property(e => e.RKHID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ANCAKPANEN).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.BASIS).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.ESTBRONDOLKG).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.ESTBRONDOLPCT).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.ESTTKBRONDOL).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.ESTTKPANEN).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.LEBIH).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.OUTPUTANGKUT).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.OUTPUTKUTIP).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.OUTPUTPANEN).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.RATIO).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.RITASI).HasColumnType("decimal(9, 2)");

                entity.HasOne(d => d.RKH)
                    .WithOne(p => p.TRKHESTPANEN)
                    .HasForeignKey<TRKHESTPANEN>(d => d.RKHID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHESTPANEN_TRKH");
            });

            modelBuilder.Entity<TRKHHASILKERJA>(entity =>
            {
                entity.HasKey(e => e.RKHID);

                entity.Property(e => e.RKHID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ALLY).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.BRONDOLKG).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.BRONDOLPCT).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.KLEENUP).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.OUTPUTPANEN).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.OUTPUTPUPUK).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.OUTPUTSEMPROT).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.PRODKG).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.PUPUKKG).HasColumnType("decimal(9, 2)");

                entity.HasOne(d => d.RKH)
                    .WithOne(p => p.TRKHHASILKERJA)
                    .HasForeignKey<TRKHHASILKERJA>(d => d.RKHID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHHASILKERJA_TRKH");
            });

            modelBuilder.Entity<TRKHHERBISIDA>(entity =>
            {
                entity.HasKey(e => new { e.RKHID, e.MATID });

                entity.Property(e => e.RKHID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MATID)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.MAT)
                    .WithMany(p => p.TRKHHERBISIDA)
                    .HasForeignKey(d => d.MATID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHHERBISIDA_MMATERIAL");

                entity.HasOne(d => d.RKH)
                    .WithMany(p => p.TRKHHERBISIDA)
                    .HasForeignKey(d => d.RKHID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHHERBISIDA_TRKH");
            });

            modelBuilder.Entity<TRKHMATERIAL>(entity =>
            {
                entity.HasKey(e => new { e.RKHID, e.ACTID, e.MATID });

                entity.Property(e => e.RKHID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ACTID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.MATID)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.UOM)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.ACT)
                    .WithMany(p => p.TRKHMATERIAL)
                    .HasForeignKey(d => d.ACTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHMATERIAL_MACTIVITY");

                entity.HasOne(d => d.MAT)
                    .WithMany(p => p.TRKHMATERIAL)
                    .HasForeignKey(d => d.MATID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHMATERIAL_MMATERIAL");

                entity.HasOne(d => d.RKH)
                    .WithMany(p => p.TRKHMATERIAL)
                    .HasForeignKey(d => d.RKHID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHMATERIAL_TRKH");
            });

            modelBuilder.Entity<TRKHTAKSASI>(entity =>
            {
                entity.HasKey(e => new { e.RKHID, e.BLOCKID });

                entity.Property(e => e.RKHID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AKP).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.ANCAKTK).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.BASIS).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.BJR).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.BLOCKAREA).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.ESTBUTUHPANEN).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.JANJANG).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.KG).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.LEBIHBASIS).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.OUTPUTPANEN).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.SPH).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.TOPOGRAFI)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WORKAREA).HasColumnType("decimal(9, 2)");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TRKHTAKSASI)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHTAKSASI_MORGANIZATION");

                entity.HasOne(d => d.RKH)
                    .WithMany(p => p.TRKHTAKSASI)
                    .HasForeignKey(d => d.RKHID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRKHTAKSASI_TRKH");
            });

            modelBuilder.Entity<TRUNNINGACCOUNT>(entity =>
            {
                entity.HasKey(e => e.TRUNNINGACCOUNTCODE)
                    .HasName("PK_TRUNNINGACCOUNT_1");

                entity.Property(e => e.TRUNNINGACCOUNTCODE)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CANCELEDCOMMENT)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEDDATE).HasColumnType("datetime");

                entity.Property(e => e.DIVID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HELPER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OPERATOR)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REMARK)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RUNNINGACCOUNTID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TRUNNINGACCOUNTDATE).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEDDATE).HasColumnType("datetime");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TRUNNINGACCOUNT)
                    .HasForeignKey(d => d.DIVID)
                    .HasConstraintName("FK_TRUNNINGACCOUNT_MDIVISI");

                entity.HasOne(d => d.OPERATORNavigation)
                    .WithMany(p => p.TRUNNINGACCOUNT)
                    .HasForeignKey(d => d.OPERATOR)
                    .HasConstraintName("FK_TRUNNINGACCOUNT_OPERATOR");

                entity.HasOne(d => d.RUNNINGACCOUNT)
                    .WithMany(p => p.TRUNNINGACCOUNT)
                    .HasForeignKey(d => d.RUNNINGACCOUNTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRUNNINGACCOUNT_MRUNNINGACCOUNT");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TRUNNINGACCOUNT)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRUNNINGACCOUNT_MDOCSTATUS");
            });

            modelBuilder.Entity<TRUNNINGACCOUNTBLOCK>(entity =>
            {
                entity.HasKey(e => new { e.TRUNNINGACCOUNTCODE, e.ACTIVITYID, e.BLOCKID });

                entity.Property(e => e.TRUNNINGACCOUNTCODE)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ACTIVITYID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HMBEGIN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HMEND).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HOURBEGIN).HasColumnType("datetime");

                entity.Property(e => e.HOUREND).HasColumnType("datetime");

                entity.Property(e => e.OUTPUTAREA).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUTPUTKONVERSI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RANGE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TRUNNINGACCOUNTBLOCK)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRUNNINGACCOUNTBLOCK_MBLOCK");

                entity.HasOne(d => d.TRUNNINGACCOUNTCODENavigation)
                    .WithMany(p => p.TRUNNINGACCOUNTBLOCK)
                    .HasForeignKey(d => d.TRUNNINGACCOUNTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRUNNINGACCOUNTBLOCK_TRUNNINGACCOUNT");
            });

            modelBuilder.Entity<TSALARYITEM>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.AMOUNT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EQUIPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MAPREF)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PAYMENTNO)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TYPEID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.ACT)
                    .WithMany(p => p.TSALARYITEM)
                    .HasForeignKey(d => d.ACTID)
                    .HasConstraintName("FK_TSALARYITEM_MACTIVITY");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.TSALARYITEM)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSALARYITEM_MEMPLOYEE");

                entity.HasOne(d => d.PAYMENTNONavigation)
                    .WithMany(p => p.TSALARYITEM)
                    .HasForeignKey(d => d.PAYMENTNO)
                    .HasConstraintName("FK_TSALARYITEM_TPAYMENT");

                entity.HasOne(d => d.TYPE)
                    .WithMany(p => p.TSALARYITEM)
                    .HasForeignKey(d => d.TYPEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSALARYITEM_MSALARYTYPE");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TSALARYITEM)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSALARYITEM_MORGANIZATION");
            });

            modelBuilder.Entity<TSALARYTYPEMAP>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AMOUNT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FREQ)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GOL)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HKMIN).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.POSID)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TYPEID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.TSALARYTYPEMAP)
                    .HasForeignKey(d => d.EMPID)
                    .HasConstraintName("FK_TSALARYTYPEMAP_MEMPLOYEE");

                entity.HasOne(d => d.POS)
                    .WithMany(p => p.TSALARYTYPEMAP)
                    .HasForeignKey(d => d.POSID)
                    .HasConstraintName("FK_TSALARYTYPEMAP_MPOSITION");

                entity.HasOne(d => d.TYPE)
                    .WithMany(p => p.TSALARYTYPEMAP)
                    .HasForeignKey(d => d.TYPEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSALARYTYPEMAP_MSALARYTYPE");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TSALARYTYPEMAP)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSALARYTYPEMAP_MORGANIZATION");
            });

            modelBuilder.Entity<TSPB>(entity =>
            {
                entity.HasKey(e => e.SPBNO);

                entity.Property(e => e.SPBNO)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DRIVERNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MILLCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OPERATORNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.REMARK)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SPBDATE).HasColumnType("datetime");

                entity.Property(e => e.SPBNODHS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TOTALKT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALSPB).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TOTALTIMBANG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPLOADDATE).HasColumnType("datetime");

                entity.Property(e => e.VEHICLENO)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TSPB)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPB_MDIVISI");

                entity.HasOne(d => d.MILLCODENavigation)
                    .WithMany(p => p.TSPB)
                    .HasForeignKey(d => d.MILLCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPB_MMILL");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TSPB)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPB_MDOCSTATUS");
            });

            modelBuilder.Entity<TSPBDETAIL>(entity =>
            {
                entity.HasKey(e => new { e.SPBNO, e.BLOCKID });

                entity.Property(e => e.SPBNO)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ESTIMATEDFRUITBUNCH).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ESTIMATEDFRUITPIECES).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRUITCOUNT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TIMESEND).HasColumnType("datetime");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TSPBDETAIL)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPBDETAIL_MBLOCK");

                entity.HasOne(d => d.SPBNONavigation)
                    .WithMany(p => p.TSPBDETAIL)
                    .HasForeignKey(d => d.SPBNO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPBDETAIL_TSPB");
            });

            modelBuilder.Entity<TSPEKSI>(entity =>
            {
                entity.HasKey(e => e.ID);

                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TGLSPEKSI).HasColumnType("datetime");

                entity.Property(e => e.EMPLOYEEID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MANDORID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LUASSPEKSI).HasColumnType("decimal(9, 2)");
                entity.Property(e => e.TGLPANEN).HasColumnType("datetime");
                entity.Property(e => e.TBSTDKPANEN).HasColumnType("decimal(9, 2)");
                entity.Property(e => e.TBSTDKBAWA).HasColumnType("decimal(9, 2)");
                entity.Property(e => e.BRDTDKKUTIP).HasColumnType("decimal(9, 2)");
                entity.Property(e => e.BRDTDKBERSIH).HasColumnType("decimal(9, 2)");
                entity.Property(e => e.BUNGAMTH).HasColumnType("decimal(9, 2)");
                entity.Property(e => e.PELEPAHTDKSUSUN).HasColumnType("decimal(9, 2)");
                entity.Property(e => e.PELEPAHTDKMEPET).HasColumnType("decimal(9, 2)");
                entity.Property(e => e.PELEPAHTDKSESUAI).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TSPEKSI)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPEKSI_MUNIT");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TSPEKSI)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPEKSI_MDIVISI");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TSPEKSI)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPEKSI_MBLOCK");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.TSPEKSIEMP)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPEKSI_MEMPLOYEE");

                entity.HasOne(d => d.MANDOR)
                    .WithMany(p => p.TSPEKSIMDR)
                    .HasForeignKey(d => d.MANDORID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPEKSI_MMANDOR");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TSPEKSI)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPEKSI_MDOCSTATUS");
            });

            modelBuilder.Entity<TSPEKSITPH>(entity =>
            {
                entity.HasKey(e => e.ID);

                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TGLSPEKSI).HasColumnType("date");

                entity.Property(e => e.PRODMILLIN).HasColumnType("decimal(9, 2)");
                entity.Property(e => e.PRODMILLEX).HasColumnType("decimal(9, 2)");
                entity.Property(e => e.RESTAN).HasColumnType("decimal(9, 2)");
                //entity.Property(e => e.BRDTERTINGGAL).HasColumnType("decimal(9, 2)");
                //entity.Property(e => e.BRDBERSERAKAN).HasColumnType("decimal(9, 2)");
                
                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TSPEKSITPH)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPEKSITPH_MUNIT");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TSPEKSITPH)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSPEKSITPH_MDIVISI");

            });

            modelBuilder.Entity<TSTOCK>(entity =>
            {
                entity.HasKey(e => new { e.LOCCODE, e.MATERIALID, e.YEAR });

                entity.Property(e => e.LOCCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MATERIALID)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AMOUNTIN0).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTIN1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTIN10).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTIN11).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTIN12).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTIN2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTIN3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTIN4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTIN5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTIN6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTIN7).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTIN8).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTIN9).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTOUT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTOUT10).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTOUT11).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTOUT12).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTOUT2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTOUT3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTOUT4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTOUT5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTOUT6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTOUT7).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTOUT8).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AMOUNTOUT9).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN0).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN10).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN11).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN12).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN7).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN8).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IN9).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT0).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT10).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT11).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT12).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT7).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT8).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUT9).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.LOCCODENavigation)
                    .WithMany(p => p.TSTOCK)
                    .HasForeignKey(d => d.LOCCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTOCK_MSTORELOCATION");

                entity.HasOne(d => d.MATERIAL)
                    .WithMany(p => p.TSTOCK)
                    .HasForeignKey(d => d.MATERIALID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTOCK_MMATERIAL");
            });

            modelBuilder.Entity<TSTOCKADJUST>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AMOUNT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LOCCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MATERIALID)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.LOCCODENavigation)
                    .WithMany(p => p.TSTOCKADJUST)
                    .HasForeignKey(d => d.LOCCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTOCKADJUST_MSTORELOCATION");

                entity.HasOne(d => d.MATERIAL)
                    .WithMany(p => p.TSTOCKADJUST)
                    .HasForeignKey(d => d.MATERIALID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTOCKADJUST_MMATERIAL");
            });

            modelBuilder.Entity<TSTOCKMOVEMENT>(entity =>
            {
                entity.HasKey(e => new { e.CODE, e.LOCCODE })
                    .HasName("PK_TSTOCKMOVEMENT_1");

                entity.Property(e => e.CODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.LOCCODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.DIRECT)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EXPVALUE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MATERIALID)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PRICE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.STOCK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TSTOCKMOVEMENT)
                    .HasForeignKey(d => d.BLOCKID)
                    .HasConstraintName("FK_TSTOCKMOVEMENT_MBLOCK");

                entity.HasOne(d => d.LOCCODENavigation)
                    .WithMany(p => p.TSTOCKMOVEMENT)
                    .HasForeignKey(d => d.LOCCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTOCKMOVEMENT_MSTORELOCATION");

                entity.HasOne(d => d.MATERIAL)
                    .WithMany(p => p.TSTOCKMOVEMENT)
                    .HasForeignKey(d => d.MATERIALID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTOCKMOVEMENT_MMATERIAL");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TSTOCKMOVEMENT)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTOCKMOVEMENT_MDOCSTATUS");

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TSTOCKMOVEMENT)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSTOCKMOVEMENT_MUNIT");
            });

            modelBuilder.Entity<TSURATPERINGATAN>(entity =>
            {
                entity.HasKey(e => e.NOSP);

                entity.Property(e => e.NOSP)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOSP1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NOSP2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.POSITIONID)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.STATUSACCEPT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TEMPATPANGGILAN)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TGLAKHIRM).HasColumnType("datetime");

                entity.Property(e => e.TGLAWALM).HasColumnType("datetime");

                entity.Property(e => e.TGLPANGGILAN).HasColumnType("datetime");

                entity.Property(e => e.TGLSP).HasColumnType("datetime");

                entity.Property(e => e.TYPESP)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ISPROCESS)
                    .HasMaxLength(1)
                    .IsUnicode(false);


                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.TSURATPERINGATAN)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSURATPERINGATAN_TSURATPERINGATAN");
            });

            modelBuilder.Entity<TTRANMILL>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BUYID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CONTID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DATEIN).HasColumnType("datetime");

                entity.Property(e => e.DATEOUT).HasColumnType("datetime");

                entity.Property(e => e.DATETRXIN).HasColumnType("datetime");

                entity.Property(e => e.DATETRXOUT).HasColumnType("datetime");

                entity.Property(e => e.DELWEIGHT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DIVID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DONO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DRIVER)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LOCID)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OPR1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OPR2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PC1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PC2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PRODID)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SENDDATE).HasColumnType("datetime");

                entity.Property(e => e.SENDID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SIM)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SOID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TICKETNO)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TRANID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UNITGRP)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.VEHID)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.WBUNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WEIGHT1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.WEIGHT2).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<TTRANMILLITM>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BJR).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BLOCKID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BUNCH).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BUNCHKG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRUIT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FRUITKG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TRANID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.TRAN)
                    .WithMany(p => p.TTRANMILLITM)
                    .HasForeignKey(d => d.TRANID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TTRANMILLITM_TTRANMILL");
            });

            modelBuilder.Entity<TTRAVEL>(entity =>
            {
                entity.HasKey(e => e.IDTRAVEL);

                entity.Property(e => e.IDTRAVEL)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STARTDATE).HasColumnType("date");
                entity.Property(e => e.ENDDATE).HasColumnType("date");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.NOTE)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TTRAVEL)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TTRAVEL_MUNIT");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TTRAVEL)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TTRAVEL_MDIVISI");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.TTRAVEL)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TTRAVEL_MEMPLOYEE");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TTRAVEL)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TTRAVEL_MDOCSTATUS");

            });

            modelBuilder.Entity<TUPKEEP>(entity =>
            {
                entity.HasKey(e => e.UPKEEPCODE);

                entity.Property(e => e.UPKEEPCODE)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ACTIVITYID)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.CANCELEDCOMMENT)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CONTID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEDDATE).HasColumnType("datetime");

                entity.Property(e => e.DIVID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MANDORID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REMARK)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEDDATE).HasColumnType("datetime");

                entity.Property(e => e.UPKEEPDATE).HasColumnType("datetime");

                entity.Property(e => e.UPLOADDATE).HasColumnType("datetime");

                entity.HasOne(d => d.ACTIVITY)
                    .WithMany(p => p.TUPKEEP)
                    .HasForeignKey(d => d.ACTIVITYID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEP_MACTIVITY");

                entity.HasOne(d => d.DIV)
                    .WithMany(p => p.TUPKEEP)
                    .HasForeignKey(d => d.DIVID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEP_MDIVISI");

                entity.HasOne(d => d.MANDOR)
                    .WithMany(p => p.TUPKEEP)
                    .HasForeignKey(d => d.MANDORID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEP_MEMPLOYEE");

                entity.HasOne(d => d.STATUSNavigation)
                    .WithMany(p => p.TUPKEEP)
                    .HasForeignKey(d => d.STATUS)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEP_MDOCSTATUS");

                entity.HasOne(d => d.UPKEEPTYPENavigation)
                    .WithMany(p => p.TUPKEEP)
                    .HasForeignKey(d => d.UPKEEPTYPE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEP_MUPKEEPTYPE");
            });

            modelBuilder.Entity<TUPKEEPCALC>(entity =>
            {
                entity.HasKey(e => new { e.UPKEEPCODE,e.BLOCKID }); //{ e.UPKEEPCODE,e.EMPLOYEEID,e.BLOCKID });
                    //.HasName("PK_TUPKEEPCALC_1");

                //entity.Property(e => e.CALCID)
                //    .Metadata.BeforeSaveBehavior = PropertySaveBehavior.Ignore;

                //entity.Property(e => e.CALCID)
                //    .HasMaxLength(72)
                //    .IsUnicode(false)
                //    .HasComputedColumnSql("(((([UPKEEPCODE]+'-')+isnull([EMPLOYEEID],''))+'-')+[BLOCKID])")
                //    .ValueGeneratedNever();

                entity.Property(e => e.BLOCKID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                //entity.Property(e => e.EMPLOYEEID)
                //    .HasMaxLength(20)
                //    .IsUnicode(false);

                entity.Property(e => e.UPKEEPCODE)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VALUE).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.UPKEEP)
                    .WithMany(p => p.TUPKEEPCALC)
                    .HasForeignKey(d => d.UPKEEPCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEPCALC_TUPKEEP");
            });

            modelBuilder.Entity<TUPKEEPVENDOR>(entity =>
            {
                entity.HasKey(e => e.UPKEEPCODE);

                entity.Property(e => e.UPKEEPCODE)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.OUTPUT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PRICE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.UPKEEP)
                    .WithOne(p => p.TUPKEEPVENDOR)
                    .HasForeignKey<TUPKEEPVENDOR>(d => d.UPKEEPCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEPVENDOR_TUPKEEP");
            });

            modelBuilder.Entity<TUPKEEPBLOCK>(entity =>
            {
                entity.HasKey(e => new { e.UPKEEPCODE, e.BLOCKID });

                entity.Property(e => e.UPKEEPCODE)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OUTPUTAREA).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OUTPUTKONVERSI).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TUPKEEPBLOCK)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEPBLOCK_MBLOCK");

                entity.HasOne(d => d.UPKEEP)
                    .WithMany(p => p.TUPKEEPBLOCK)
                    .HasForeignKey(d => d.UPKEEPCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEPBLOCK_TUPKEEP");
            });

            modelBuilder.Entity<TUPKEEPEMPLOYEE>(entity =>
            {
                entity.HasKey(e => new { e.UPKEEPCODE, e.EMPLOYEEID });

                entity.Property(e => e.UPKEEPCODE)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OUTPUT).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RATE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.VALUE).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.EMPLOYEE)
                    .WithMany(p => p.TUPKEEPEMPLOYEE)
                    .HasForeignKey(d => d.EMPLOYEEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEPEMPLOYEE_MEMPLOYEE");

                entity.HasOne(d => d.UPKEEP)
                    .WithMany(p => p.TUPKEEPEMPLOYEE)
                    .HasForeignKey(d => d.UPKEEPCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEPEMPLOYEE_TUPKEEP");
            });

            modelBuilder.Entity<TUPKEEPMATERIAL>(entity =>
            {
                entity.HasKey(e => new { e.UPKEEPCODE, e.ACTIVITYID, e.BLOCKID, e.MATERIALID });

                entity.Property(e => e.UPKEEPCODE)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ACTIVITYID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MATERIALID)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.BATCHID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.QUANTITY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.STOCK).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.ACTIVITY)
                    .WithMany(p => p.TUPKEEPMATERIAL)
                    .HasForeignKey(d => d.ACTIVITYID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEPMATERIAL_MACTIVITY");

                entity.HasOne(d => d.BATCH)
                    .WithMany(p => p.TUPKEEPMATERIALBATCH)
                    .HasForeignKey(d => d.BATCHID)
                    .HasConstraintName("FK_TUPKEEPMATERIAL_MBLOCK1");

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.TUPKEEPMATERIALBLOCK)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEPMATERIAL_MBLOCK");

                entity.HasOne(d => d.MATERIAL)
                    .WithMany(p => p.TUPKEEPMATERIAL)
                    .HasForeignKey(d => d.MATERIALID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEPMATERIAL_MMATERIAL");

                entity.HasOne(d => d.UPKEEP)
                    .WithMany(p => p.TUPKEEPMATERIAL)
                    .HasForeignKey(d => d.UPKEEPCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUPKEEPMATERIAL_TUPKEEP");
            });

            modelBuilder.Entity<WFDOCUMENT>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ATTACHMENTPATH).IsUnicode(false);

                entity.Property(e => e.DESCRIPTION)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DOCDATE).HasColumnType("datetime");

                entity.Property(e => e.DOCOWNER)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DOCSTATUS)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DOCTYPE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LASTUPDATEDATE).HasColumnType("datetime");

                entity.Property(e => e.LASTUPDATEUSER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TITLE)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCNO)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WFDOCUMENTBAFDETAIL>(entity =>
            {
                entity.HasKey(e => new { e.CODE, e.FINGERDATE, e.EMPLOYEEID });

                entity.Property(e => e.CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FINGERDATE).HasColumnType("datetime");

                entity.Property(e => e.EMPLOYEEID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CARD)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DIVISIONID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REASON)
                    .HasMaxLength(999)
                    .IsUnicode(false);

                entity.HasOne(d => d.CODENavigation)
                    .WithMany(p => p.WFDOCUMENTBAFDETAIL)
                    .HasForeignKey(d => d.CODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WFDOCUMENTBAFDETAIL_WFDOCUMENT");
            });

            modelBuilder.Entity<WFDOCUMENTPREMINONPANEN>(entity =>
            {
                entity.HasKey(e => e.CODE)
                    .HasName("PK_WFDOCUMENTPREMINONPANEN_1");

                entity.Property(e => e.CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.PREMINO)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.HasOne(d => d.CODENavigation)
                    .WithOne(p => p.WFDOCUMENTPREMINONPANEN)
                    .HasForeignKey<WFDOCUMENTPREMINONPANEN>(d => d.CODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WFDOCUMENTPREMINONPANEN_WFDOCUMENT1");
            });

            modelBuilder.Entity<WFDOCUMENTVIEW>(entity =>
            {
                entity.HasKey(e => e.CODE);

                entity.Property(e => e.CODE)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LASTACTIONTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LASTACTIVITY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LASTACTIVITYNAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NEXTACTIVITYNAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.CODENavigation)
                    .WithOne(p => p.WFDOCUMENTVIEW)
                    .HasForeignKey<WFDOCUMENTVIEW>(d => d.CODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WFDOCUMENTVIEW_WFDOCUMENT");
            });

            modelBuilder.Entity<MICRAPP>(entity =>
            {
                entity.HasKey(e => e.APPID);

                entity.Property(e => e.APPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.APPNAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SAPPOSTINGHEADER>(entity =>
            {
                entity.HasKey(e => new { /*e.ID,*/ /*e.DOCTYPE, */e.PMS_DOC_NO });

                entity.Property(e => e.TYPE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PMS_DOC_NO)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CANCEL)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CANCEL_DATE).HasColumnType("datetime");

                entity.Property(e => e.POSTING)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                //entity.Property(e => e.SAP_DOC_NO)
                //    .HasMaxLength(10)
                //    .IsUnicode(false);

                //entity.Property(e => e.SAP_DOC_NO_CANCEL)
                //    .HasMaxLength(10)
                //    .IsUnicode(false);

                entity.Property(e => e.TRANS_DATE).HasColumnType("datetime");

            });

            modelBuilder.Entity<SAPPOSTING>(entity =>
            {
                entity.HasKey(e => new { e.ID/*, e.DOCTYPE, e.PMS_DOC_NO, e.ITEMID*/ });

                entity.Property(e => e.DOCTYPE)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PMS_DOC_NO)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ITEMID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ACT)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ACT2)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.AREA).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BATCH)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCK)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BOR)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BRD).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CANCEL)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CANCEL_DATE).HasColumnType("datetime");

                entity.Property(e => e.CE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.COSTCTR)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CURR)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DIV)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DRIVER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPTYPE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EQUIP)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EQUIPLOC)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.JJG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JJGKG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KMEND).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.KMSTART).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.MATID)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NOKRTTB)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OPRID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER1)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER2)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ORDER_)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PLANT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.POSTING)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.RPLANT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SAP_DOC_NO)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SAP_DOC_NO_CANCEL)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SEQ)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SPLANT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STATE)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MSG_ERROR)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TBS).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TIME).HasColumnType("datetime");

                entity.Property(e => e.TIMEEND).HasColumnType("datetime");

                entity.Property(e => e.TIMESTART).HasColumnType("datetime");

                entity.Property(e => e.TRANS_DATE).HasColumnType("datetime");

                entity.Property(e => e.UOM)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.VEH)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VOL).HasColumnType("decimal(9, 0)");

                entity.Property(e => e.WBS)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WORKLOC)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.SAPHEADER)
                    .WithMany(p => p.SAPPOSTING)
                    .HasForeignKey(d => d.PMS_DOC_NO)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SAPPOSTING_SAPHEADER");
            });



            modelBuilder.Entity<MDEPARTMENT>(entity =>
            {
                entity.HasKey(e => e.DEPTID);

                entity.Property(e => e.DEPTID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DEPTNAME)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<TICR>(entity =>
            {
                entity.HasKey(e => e.ICRNO);

                entity.Property(e => e.ICRNO)
                    .HasMaxLength(30)
                    .IsUnicode(false);
                entity.Property(e => e.ACTIONTYPE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACTION)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ACTIONENDACTUAL).HasColumnType("date");

                entity.Property(e => e.ACTIONENDPLAN).HasColumnType("date");

                entity.Property(e => e.ACTIONSTARTACTUAL).HasColumnType("date");

                entity.Property(e => e.ACTIONSTARTPLAN).HasColumnType("date");

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DEPLOYENDACTUAL).HasColumnType("date");

                entity.Property(e => e.DEPLOYENDPLAN).HasColumnType("date");

                entity.Property(e => e.DEPLOYSTARTACTUAL).HasColumnType("date");

                entity.Property(e => e.DEPLOYSTARTPLAN).HasColumnType("date");

                entity.Property(e => e.DEPTID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DESCRIPTION)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DEVENDACTUAL).HasColumnType("date");

                entity.Property(e => e.DEVENDPLAN).HasColumnType("date");

                entity.Property(e => e.DEVSTARTACTUAL).HasColumnType("date");

                entity.Property(e => e.DEVSTARTPLAN).HasColumnType("date");

                entity.Property(e => e.FINISHDATE).HasColumnType("date");

                entity.Property(e => e.ICRDATE).HasColumnType("date");

                entity.Property(e => e.REASON)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.RESOURCES)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.RNDATE).HasColumnType("date");

                entity.Property(e => e.RNNO)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RN)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ROLLBACKPLAN)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TESTPLAN)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TESTRESULT)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TITLE)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UATENDACTUAL).HasColumnType("date");

                entity.Property(e => e.UATENDPLAN).HasColumnType("date");

                entity.Property(e => e.UATNO)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UATSTARTACTUAL).HasColumnType("date");

                entity.Property(e => e.UATSTARTPLAN).HasColumnType("date");

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.DEPT)
                    .WithMany(p => p.TICR)
                    .HasForeignKey(d => d.DEPTID)
                    .HasConstraintName("FK_TICR_MDEPARTMENT");

                entity.HasOne(d => d.UNIT)
                    .WithMany(p => p.TICR)
                    .HasForeignKey(d => d.UNITID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TICR_MUNIT");
            });

            modelBuilder.Entity<TICRAPP>(entity =>
            {
                entity.HasKey(e => new { e.ICRNO, e.APPID });

                entity.Property(e => e.ICRNO)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.APPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.APP)
                    .WithMany(p => p.TICRAPP)
                    .HasForeignKey(d => d.APPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TICRAPP_MICRAPP");

                entity.HasOne(d => d.ICRNONavigation)
                    .WithMany(p => p.TICRAPP)
                    .HasForeignKey(d => d.ICRNO)
                    .HasConstraintName("FK_TICRAPP_TICR");
            });


            modelBuilder.Entity<TITEMAILREQUEST>(entity =>
            {
                entity.HasKey(e => e.REGISTERID);

                entity.Property(e => e.REGISTERID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DEPTID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMAIL)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EXECUTIONDATE).HasColumnType("date");

                entity.Property(e => e.NOTES)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.REGISTERDATE).HasColumnType("date");

                entity.Property(e => e.REQUESTDATE).HasColumnType("date");

                entity.Property(e => e.REQUESTER)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TITINVOICE>(entity =>
            {
                entity.HasKey(e => e.REGISTERID);

                entity.Property(e => e.REGISTERID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.AMOUNT).HasColumnType("numeric(22, 2)");

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CURRENCYCODE)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DEPTID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DUEDATE).HasColumnType("date");

                entity.Property(e => e.INVOICEDATE).HasColumnType("date");

                entity.Property(e => e.INVOICENO)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.INVOICETYPE)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NOTES)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.REGISTERDATE).HasColumnType("date");

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VENDORID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VENDORNAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            //modelBuilder.Entity<TITINVOICEDETAIL>(entity =>
            //{
            //    entity.HasKey(e => new { e.REGISTERID, e.INVOICENO });

            //    entity.Property(e => e.REGISTERID)
            //        .HasMaxLength(25)
            //        .IsUnicode(false);

            //    entity.Property(e => e.INVOICENO)
            //        .HasMaxLength(100)
            //        .IsUnicode(false);

            //    entity.Property(e => e.AMOUNT).HasColumnType("decimal(22, 2)");

            //    entity.Property(e => e.CURRENCYCODE)
            //        .IsRequired()
            //        .HasMaxLength(5)
            //        .IsUnicode(false);

            //    entity.Property(e => e.DUEDATE).HasColumnType("date");

            //    entity.Property(e => e.INVOICEDATE).HasColumnType("date");

            //    entity.Property(e => e.NOTES)
            //        .HasMaxLength(1000)
            //        .IsUnicode(false);

            //    entity.Property(e => e.REJECTEDBY)
            //        .HasMaxLength(50)
            //        .IsUnicode(false);

            //    entity.Property(e => e.REJECTEDDATE).HasColumnType("datetime");

            //    entity.Property(e => e.REJECTIONREASON)
            //        .HasMaxLength(1000)
            //        .IsUnicode(false);

            //    entity.HasOne(d => d.REGISTER)
            //        .WithMany(p => p.TITINVOICEDETAIL)
            //        .HasForeignKey(d => d.REGISTERID)
            //        .HasConstraintName("FK_TITINVOICEDETAIL_TITINVOICE");
            //});

            modelBuilder.Entity<TITIOM>(entity =>
            {
                entity.HasKey(e => e.REGISTERID);

                entity.Property(e => e.REGISTERID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DEPTID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DESCRIPTION)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.REGISTERDATE).HasColumnType("date");

                entity.Property(e => e.TITLE)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MBANK>(entity =>
            {
                entity.HasKey(e => e.BANKID);

                entity.Property(e => e.BANKID)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BANKNAME)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UPDATEBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<JOBSEMPLASTDATE>(entity =>
            {
                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ENDDATE).HasColumnType("datetime");

                entity.Property(e => e.STARTDATE).HasColumnType("datetime");

                entity.Property(e => e.TODAY).HasColumnType("datetime");

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YESTERDAY).HasColumnType("datetime");
            });

            modelBuilder.Entity<MABSENCEREASON>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.DESCRIPTION)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TEXT)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATEBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });



            modelBuilder.Entity<TATTENDANCEPROBLEM>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("date");

                entity.Property(e => e.NOTES)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TATTENDANCEPROBLEM)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TATTENDANCEPROBLEM_MUNIT");
            });

            modelBuilder.Entity<TATTENDANCEPROBLEMEMPLOYEE>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.LINENO });

                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTES)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.REASONID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.REASONTEXT)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REJECTEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REJECTEDDATE).HasColumnType("datetime");

                entity.Property(e => e.REJECTIONREASON)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TIME).HasColumnType("datetime");

                entity.HasOne(d => d.EMP)
                    .WithMany(p => p.TATTENDANCEPROBLEMEMPLOYEE)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TATTENDANCEPROBLEMEMPLOYEE_MEMPLOYEE");

                entity.HasOne(d => d.IDNavigation)
                    .WithMany(p => p.TATTENDANCEPROBLEMEMPLOYEE)
                    .HasForeignKey(d => d.ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TATTENDANCEPROBLEMEMPLOYEE_TFAILEDFINGER");
            });

            modelBuilder.Entity<MEMPLOYEEDEL>(entity =>
            {
                entity.Property(e => e.DOCNO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TOTSALARY).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UPDATED).HasColumnType("datetime");
            });

            modelBuilder.Entity<THARVESTWFLEBIHBASIS>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("date");

                entity.Property(e => e.HARVESTCODE)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WFERRORTEXT)
                    .HasMaxLength(1000)                    
                    .IsUnicode(false);

                entity.HasOne(d => d.THARVEST)
                    .WithMany(p => p.THARVESTWFLEBIHBASIS)
                    .HasForeignKey(d => d.HARVESTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTWFLEBIHBASIS_THARVEST");

                entity.HasOne(d => d.MUNIT)
                    .WithMany(p => p.THARVESTWFLEBIHBASIS)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTWFLEBIHBASIS_MUNIT");
            });

            modelBuilder.Entity<THARVESTWFLEBIHBASISDETAIL>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.EMPID });

                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BASE).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JJG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.KG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.REJECTEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REJECTEDDATE).HasColumnType("datetime");

                entity.Property(e => e.REJECTIONREASON)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.MEMPLOYEE)
                    .WithMany(p => p.THARVESTWFLEBIHBASISDETAIL)
                    .HasForeignKey(d => d.EMPID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTWFLEBIHBASISDETAIL_MEMPLOYEE");

                entity.HasOne(d => d.THARVESTWFLEBIHBASIS)
                    .WithMany(p => p.THARVESTWFLEBIHBASISDETAIL)
                    .HasForeignKey(d => d.ID)
                    .HasConstraintName("FK_THARVESTWFLEBIHBASISDETAIL_THARVESTWFLEBIHBASIS");
            });

            modelBuilder.Entity<THARVESTWFMAXBRONDOL>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("date");

                entity.Property(e => e.HARVESTCODE)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WFERRORTEXT)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.THARVEST)
                    .WithMany(p => p.THARVESTWFMAXBRONDOL)
                    .HasForeignKey(d => d.HARVESTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTWFMAXBRONDOL_THARVEST");

                entity.HasOne(d => d.MUNIT)
                    .WithMany(p => p.THARVESTWFMAXBRONDOL)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTWFMAXBRONDOL_MUNIT");
            });

            modelBuilder.Entity<THARVESTWFMAXBRONDOLDETAIL>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.BLOCKID });

                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BRONDOL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CURRENTBRONDOL).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.JJG).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RATIO).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.REJECTEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REJECTEDDATE).HasColumnType("datetime");

                entity.Property(e => e.REJECTIONREASON)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.BLOCK)
                    .WithMany(p => p.THARVESTWFMAXBRONDOLDETAIL)
                    .HasForeignKey(d => d.BLOCKID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTWFMAXBRONDOLDETAIL_MBLOCK");

                entity.HasOne(d => d.THARVESTWFMAXBRONDOL)
                    .WithMany(p => p.THARVESTWFMAXBRONDOLDETAIL)
                    .HasForeignKey(d => d.ID)
                    .HasConstraintName("FK_THARVESTWFMAXBRONDOLDETAIL_THARVESTWFMAXBRONDOL");
            });

            modelBuilder.Entity<THARVESTWFDAYVALIDATION>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("date");

                entity.Property(e => e.HARVESTCODE)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WFERRORTEXT)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.THARVEST)
                    .WithMany(p => p.THARVESTWFDAYVALIDATION)
                    .HasForeignKey(d => d.HARVESTCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTWFDAYVALIDATION_THARVEST");

                entity.HasOne(d => d.MUNIT)
                    .WithMany(p => p.THARVESTWFDAYVALIDATION)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_THARVESTWFDAYVALIDATION_MUNIT");
            });

            modelBuilder.Entity<TPAYMENTWFADJUSTHK>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.CREATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("date");

                entity.Property(e => e.ENDDATE).HasColumnType("date");

                entity.Property(e => e.PAYMENTDOCNO)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.STARTDATE).HasColumnType("date");

                entity.Property(e => e.STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UNITCODE)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WFERRORTEXT)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.UNITCODENavigation)
                    .WithMany(p => p.TPAYMENTWFADJUSTHK)
                    .HasForeignKey(d => d.UNITCODE)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENTWFADJUSTHK_MUNIT");
            });

            modelBuilder.Entity<TPAYMENTWFADJUSTHKDETAIL>(entity =>
            {
                entity.HasKey(e => new { e.ID, e.EMPID, e.HARVESTCODE });

                entity.Property(e => e.ID)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.HARVESTCODE)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ADJUSTEDHK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.HARVESTDATE).HasColumnType("date");

                entity.Property(e => e.HK).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NOTE)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.REJECTEDBY)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.REJECTEDDATE).HasColumnType("datetime");

                entity.Property(e => e.REJECTIONREASON)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ATTDOCID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PROCESSSTATUS)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                //entity.HasOne(d => d.EMP)
                //    .WithMany(p => p.TPAYMENTWFADJUSTHKDETAIL)
                //    .HasForeignKey(d => d.EMPID)
                //    .OnDelete(DeleteBehavior.ClientSetNull)
                //    .HasConstraintName("FK_TPAYMENTWFADJUSTHKDETAIL_MEMPLOYEE");

                entity.HasOne(d => d.TPAYMENTWFADJUSTHK)
                    .WithMany(p => p.TPAYMENTWFADJUSTHKDETAIL)
                    .HasForeignKey(d => d.ID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPAYMENTWFADJUSTHKDETAIL_TPAYMENTWFADJUSTHK");
            });


            modelBuilder.Entity<TLEAVE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ATTDOCID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.DATEFROM).HasColumnType("datetime");

                entity.Property(e => e.DATETO).HasColumnType("datetime");

                entity.Property(e => e.EMPID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PROCESSSTATUS)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.STATUS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TYPEID)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.UNITID)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.WFDOCSTATUS)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.WFDOCSTATUSTEXT)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.WFERRORTEXT)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MLEAVETYPE>(entity =>
            {
                entity.Property(e => e.ID)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ABSENTCODE)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.NAME)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NOTE)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.SEX)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EM_TINSPECTION>(entity =>
            {
                entity.Property(e => e.id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.actId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.blockId)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.createDateTime).HasColumnType("datetime");

                entity.Property(e => e.createUser)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.date).HasColumnType("datetime");

                entity.Property(e => e.distance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.distanceSet).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.latitude)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.longitude)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.note)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.picturePathName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.status)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.upload)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EM_TTRACKING>(entity =>
            {
                entity.HasKey(e => new { e.id, e.seq });

                entity.Property(e => e.id)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.createDateTime).HasColumnType("datetime");

                entity.Property(e => e.createUser)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.date).HasColumnType("datetime");

                entity.Property(e => e.distance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.distanceSet).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.latitude)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.longitude)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.status)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.title)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.upload)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RKHHEADER1>(entity =>
            {
                entity.HasKey(e => new { e.RKH_CODE });

                entity.Property(e => e.RKH_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_DIVID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_DATE).HasColumnType("datetime");

                entity.Property(e => e.RKH_ACTDATE).HasColumnType("datetime");

                entity.Property(e => e.NOTE)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.STATUS)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CREATEBY)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CREATED).HasColumnType("datetime");

                entity.Property(e => e.UPDATEBY)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UPDATED).HasColumnType("datetime");

                entity.Property(e => e.CANCELEDCOMMENT)
                    .HasMaxLength(200)
                    .IsUnicode(false);

            });

            modelBuilder.Entity<RKHMANDOR1>(entity =>
            {
                entity.HasKey(e => new { e.RKH_MANDOR_CODE });

                entity.Property(e => e.RKH_MANDOR_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ACTID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.MANDORID)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RKHBLOCK1>(entity =>
            {
                entity.HasKey(e => new { e.RKH_BLOCK_CODE });

                entity.Property(e => e.RKH_BLOCK_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_MANDOR_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BLOCKID)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.OUTPUT).HasColumnType("decimal(18, 4)");

            });

            modelBuilder.Entity<RKHEMPLOYEE1>(entity =>
            {
                entity.HasKey(e => new { e.RKH_EMPLOYEE_CODE });

                entity.Property(e => e.RKH_EMPLOYEE_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_MANDOR_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EMPID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

            });

            modelBuilder.Entity<RKHMATERIAL1>(entity =>
            {
                entity.HasKey(e => new { e.RKH_MATERIAL_CODE });

                entity.Property(e => e.RKH_MATERIAL_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RKH_MANDOR_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MATERIALID)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.QTY).HasColumnType("decimal(18, 4)");

            });

            BuildModelForViews(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}